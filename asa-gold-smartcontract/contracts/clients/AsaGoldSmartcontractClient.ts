/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "sellAssetWithDeposit(axfer,address,asset,asset,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buyNFT(axfer,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeQuotation(asset,uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "requestParcelDelivery(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setParcelDelivery(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setNotForSale(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdrawNFT(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optinAsset(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "depositNFT(axfer,address,uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "governor": {
          "type": "bytes",
          "key": "g"
        },
        "fee": {
          "type": "uint64",
          "key": "f"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "AsaGoldSmartcontract",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "fee",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "sellAssetWithDeposit",
        "args": [
          {
            "name": "nftDepositTx",
            "type": "axfer",
            "desc": "NFT deposit tx"
          },
          {
            "name": "vaultOwnerAddress",
            "type": "address",
            "desc": "Address of the account which can set state Shipped to customer"
          },
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "tokenAsset",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "weight",
            "type": "uint64",
            "desc": "The weight of the gold contained in the gold coin"
          },
          {
            "name": "price",
            "type": "uint64",
            "desc": "The price in gold token for which the asset can be sold to clients"
          }
        ],
        "desc": "Deposit Gold coin NFT, set seller owner and price for sale",
        "returns": {
          "type": "void",
          "desc": "The sum of a and b"
        }
      },
      {
        "name": "buyNFT",
        "args": [
          {
            "name": "purchaseAssetDepositTx",
            "type": "axfer",
            "desc": "Transfer to the smart contract with the purchase price"
          },
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": "Identifies NFT which client wants to buy"
          }
        ],
        "desc": "Client can buy NFT which is for sale on the reserve sale or secondary sale",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "changeQuotation",
        "args": [
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": "The gold coin NFT asset"
          },
          {
            "name": "numbers",
            "type": "uint64[]",
            "desc": "The bytes containing quoteAsset1, asset1, quoteAsset2 .. asset5"
          }
        ],
        "desc": "Change price quotes for NFT on sale",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "requestParcelDelivery",
        "args": [
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setParcelDelivery",
        "args": [
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setNotForSale",
        "args": [
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "withdrawNFT",
        "args": [
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "optinAsset",
        "args": [
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "depositNFT",
        "args": [
          {
            "name": "nftDepositTx",
            "type": "axfer",
            "desc": ""
          },
          {
            "name": "seller",
            "type": "address",
            "desc": ""
          },
          {
            "name": "numbers",
            "type": "uint64[]",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the AsaGoldSmartcontract smart contract.
 */
export type AsaGoldSmartcontract = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64)void' | 'createApplication', {
      argsObj: {
        fee: bigint | number
      }
      argsTuple: [fee: bigint | number]
      returns: void
    }>
    & Record<'sellAssetWithDeposit(axfer,address,asset,asset,uint64,uint64)void' | 'sellAssetWithDeposit', {
      argsObj: {
        /**
         * NFT deposit tx
         */
        nftDepositTx: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Address of the account which can set state Shipped to customer
         */
        vaultOwnerAddress: string
        nftAsset: number | bigint
        tokenAsset: number | bigint
        /**
         * The weight of the gold contained in the gold coin
         */
        weight: bigint | number
        /**
         * The price in gold token for which the asset can be sold to clients
         */
        price: bigint | number
      }
      argsTuple: [nftDepositTx: TransactionToSign | Transaction | Promise<SendTransactionResult>, vaultOwnerAddress: string, nftAsset: number | bigint, tokenAsset: number | bigint, weight: bigint | number, price: bigint | number]
      /**
       * The sum of a and b
       */
      returns: void
    }>
    & Record<'buyNFT(axfer,asset)void' | 'buyNFT', {
      argsObj: {
        /**
         * Transfer to the smart contract with the purchase price
         */
        purchaseAssetDepositTx: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Identifies NFT which client wants to buy
         */
        nftAsset: number | bigint
      }
      argsTuple: [purchaseAssetDepositTx: TransactionToSign | Transaction | Promise<SendTransactionResult>, nftAsset: number | bigint]
      returns: void
    }>
    & Record<'changeQuotation(asset,uint64[])void' | 'changeQuotation', {
      argsObj: {
        /**
         * The gold coin NFT asset
         */
        nftAsset: number | bigint
        /**
         * The bytes containing quoteAsset1, asset1, quoteAsset2 .. asset5
         */
        numbers: bigint | number[]
      }
      argsTuple: [nftAsset: number | bigint, numbers: bigint | number[]]
      returns: void
    }>
    & Record<'requestParcelDelivery(asset)void' | 'requestParcelDelivery', {
      argsObj: {
        nftAsset: number | bigint
      }
      argsTuple: [nftAsset: number | bigint]
      returns: void
    }>
    & Record<'setParcelDelivery(asset)void' | 'setParcelDelivery', {
      argsObj: {
        nftAsset: number | bigint
      }
      argsTuple: [nftAsset: number | bigint]
      returns: void
    }>
    & Record<'setNotForSale(asset)void' | 'setNotForSale', {
      argsObj: {
        nftAsset: number | bigint
      }
      argsTuple: [nftAsset: number | bigint]
      returns: void
    }>
    & Record<'withdrawNFT(asset)void' | 'withdrawNFT', {
      argsObj: {
        nftAsset: number | bigint
      }
      argsTuple: [nftAsset: number | bigint]
      returns: void
    }>
    & Record<'optinAsset(asset)void' | 'optinAsset', {
      argsObj: {
        nftAsset: number | bigint
      }
      argsTuple: [nftAsset: number | bigint]
      returns: void
    }>
    & Record<'depositNFT(axfer,address,uint64[])void' | 'depositNFT', {
      argsObj: {
        nftDepositTx: TransactionToSign | Transaction | Promise<SendTransactionResult>
        seller: string
        numbers: bigint | number[]
      }
      argsTuple: [nftDepositTx: TransactionToSign | Transaction | Promise<SendTransactionResult>, seller: string, numbers: bigint | number[]]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'g'?: BinaryState
      'f'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AsaGoldSmartcontractSig = keyof AsaGoldSmartcontract['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AsaGoldSmartcontractSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AsaGoldSmartcontract smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AsaGoldSmartcontractSig> = AsaGoldSmartcontract['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AsaGoldSmartcontract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AsaGoldSmartcontractSig> = AsaGoldSmartcontract['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AsaGoldSmartcontractCreateCalls = (typeof AsaGoldSmartcontractCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AsaGoldSmartcontractCreateCallParams =
  | (TypedCallParams<'createApplication(uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AsaGoldSmartcontractDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AsaGoldSmartcontractCreateCalls) => AsaGoldSmartcontractCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AsaGoldSmartcontractCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AsaGoldSmartcontract smart contract using the createApplication(uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.fee],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the sellAssetWithDeposit(axfer,address,asset,asset,uint64,uint64)void ABI method
   *
   * Deposit Gold coin NFT, set seller owner and price for sale
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sellAssetWithDeposit(args: MethodArgs<'sellAssetWithDeposit(axfer,address,asset,asset,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sellAssetWithDeposit(axfer,address,asset,asset,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.nftDepositTx, args.vaultOwnerAddress, args.nftAsset, args.tokenAsset, args.weight, args.price],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the buyNFT(axfer,asset)void ABI method
   *
   * Client can buy NFT which is for sale on the reserve sale or secondary sale
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static buyNft(args: MethodArgs<'buyNFT(axfer,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'buyNFT(axfer,asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.purchaseAssetDepositTx, args.nftAsset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the changeQuotation(asset,uint64[])void ABI method
   *
   * Change price quotes for NFT on sale
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeQuotation(args: MethodArgs<'changeQuotation(asset,uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'changeQuotation(asset,uint64[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.nftAsset, args.numbers],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the requestParcelDelivery(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static requestParcelDelivery(args: MethodArgs<'requestParcelDelivery(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'requestParcelDelivery(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.nftAsset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setParcelDelivery(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setParcelDelivery(args: MethodArgs<'setParcelDelivery(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setParcelDelivery(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.nftAsset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setNotForSale(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setNotForSale(args: MethodArgs<'setNotForSale(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setNotForSale(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.nftAsset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdrawNFT(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawNft(args: MethodArgs<'withdrawNFT(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdrawNFT(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.nftAsset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the optinAsset(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optinAsset(args: MethodArgs<'optinAsset(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optinAsset(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.nftAsset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the depositNFT(axfer,address,uint64[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static depositNft(args: MethodArgs<'depositNFT(axfer,address,uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'depositNFT(axfer,address,uint64[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.nftDepositTx, args.seller, args.numbers],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AsaGoldSmartcontract smart contract
 */
export class AsaGoldSmartcontractClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AsaGoldSmartcontractClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AsaGoldSmartcontract['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AsaGoldSmartcontract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AsaGoldSmartcontractDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AsaGoldSmartcontractCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AsaGoldSmartcontract smart contract using the createApplication(uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(uint64)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(AsaGoldSmartcontractCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AsaGoldSmartcontract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the sellAssetWithDeposit(axfer,address,asset,asset,uint64,uint64)void ABI method.
   *
   * Deposit Gold coin NFT, set seller owner and price for sale
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The sum of a and b
   */
  public sellAssetWithDeposit(args: MethodArgs<'sellAssetWithDeposit(axfer,address,asset,asset,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AsaGoldSmartcontractCallFactory.sellAssetWithDeposit(args, params))
  }

  /**
   * Calls the buyNFT(axfer,asset)void ABI method.
   *
   * Client can buy NFT which is for sale on the reserve sale or secondary sale
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public buyNft(args: MethodArgs<'buyNFT(axfer,asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AsaGoldSmartcontractCallFactory.buyNft(args, params))
  }

  /**
   * Calls the changeQuotation(asset,uint64[])void ABI method.
   *
   * Change price quotes for NFT on sale
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeQuotation(args: MethodArgs<'changeQuotation(asset,uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AsaGoldSmartcontractCallFactory.changeQuotation(args, params))
  }

  /**
   * Calls the requestParcelDelivery(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public requestParcelDelivery(args: MethodArgs<'requestParcelDelivery(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AsaGoldSmartcontractCallFactory.requestParcelDelivery(args, params))
  }

  /**
   * Calls the setParcelDelivery(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setParcelDelivery(args: MethodArgs<'setParcelDelivery(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AsaGoldSmartcontractCallFactory.setParcelDelivery(args, params))
  }

  /**
   * Calls the setNotForSale(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setNotForSale(args: MethodArgs<'setNotForSale(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AsaGoldSmartcontractCallFactory.setNotForSale(args, params))
  }

  /**
   * Calls the withdrawNFT(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawNft(args: MethodArgs<'withdrawNFT(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AsaGoldSmartcontractCallFactory.withdrawNft(args, params))
  }

  /**
   * Calls the optinAsset(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optinAsset(args: MethodArgs<'optinAsset(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AsaGoldSmartcontractCallFactory.optinAsset(args, params))
  }

  /**
   * Calls the depositNFT(axfer,address,uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public depositNft(args: MethodArgs<'depositNFT(axfer,address,uint64[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AsaGoldSmartcontractCallFactory.depositNft(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AsaGoldSmartcontract['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get g() {
        return AsaGoldSmartcontractClient.getBinaryState(state, 'g')
      },
      get f() {
        return AsaGoldSmartcontractClient.getIntegerState(state, 'f')
      },
    }
  }

  public compose(): AsaGoldSmartcontractComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      sellAssetWithDeposit(args: MethodArgs<'sellAssetWithDeposit(axfer,address,asset,asset,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sellAssetWithDeposit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      buyNft(args: MethodArgs<'buyNFT(axfer,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.buyNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeQuotation(args: MethodArgs<'changeQuotation(asset,uint64[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeQuotation(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      requestParcelDelivery(args: MethodArgs<'requestParcelDelivery(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.requestParcelDelivery(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setParcelDelivery(args: MethodArgs<'setParcelDelivery(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setParcelDelivery(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setNotForSale(args: MethodArgs<'setNotForSale(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setNotForSale(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawNft(args: MethodArgs<'withdrawNFT(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optinAsset(args: MethodArgs<'optinAsset(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optinAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      depositNft(args: MethodArgs<'depositNFT(axfer,address,uint64[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.depositNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AsaGoldSmartcontractComposer
  }
}
export type AsaGoldSmartcontractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the sellAssetWithDeposit(axfer,address,asset,asset,uint64,uint64)void ABI method.
   *
   * Deposit Gold coin NFT, set seller owner and price for sale
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sellAssetWithDeposit(args: MethodArgs<'sellAssetWithDeposit(axfer,address,asset,asset,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AsaGoldSmartcontractComposer<[...TReturns, MethodReturn<'sellAssetWithDeposit(axfer,address,asset,asset,uint64,uint64)void'>]>

  /**
   * Calls the buyNFT(axfer,asset)void ABI method.
   *
   * Client can buy NFT which is for sale on the reserve sale or secondary sale
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyNft(args: MethodArgs<'buyNFT(axfer,asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AsaGoldSmartcontractComposer<[...TReturns, MethodReturn<'buyNFT(axfer,asset)void'>]>

  /**
   * Calls the changeQuotation(asset,uint64[])void ABI method.
   *
   * Change price quotes for NFT on sale
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeQuotation(args: MethodArgs<'changeQuotation(asset,uint64[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AsaGoldSmartcontractComposer<[...TReturns, MethodReturn<'changeQuotation(asset,uint64[])void'>]>

  /**
   * Calls the requestParcelDelivery(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  requestParcelDelivery(args: MethodArgs<'requestParcelDelivery(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AsaGoldSmartcontractComposer<[...TReturns, MethodReturn<'requestParcelDelivery(asset)void'>]>

  /**
   * Calls the setParcelDelivery(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setParcelDelivery(args: MethodArgs<'setParcelDelivery(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AsaGoldSmartcontractComposer<[...TReturns, MethodReturn<'setParcelDelivery(asset)void'>]>

  /**
   * Calls the setNotForSale(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setNotForSale(args: MethodArgs<'setNotForSale(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AsaGoldSmartcontractComposer<[...TReturns, MethodReturn<'setNotForSale(asset)void'>]>

  /**
   * Calls the withdrawNFT(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawNft(args: MethodArgs<'withdrawNFT(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AsaGoldSmartcontractComposer<[...TReturns, MethodReturn<'withdrawNFT(asset)void'>]>

  /**
   * Calls the optinAsset(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optinAsset(args: MethodArgs<'optinAsset(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AsaGoldSmartcontractComposer<[...TReturns, MethodReturn<'optinAsset(asset)void'>]>

  /**
   * Calls the depositNFT(axfer,address,uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositNft(args: MethodArgs<'depositNFT(axfer,address,uint64[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AsaGoldSmartcontractComposer<[...TReturns, MethodReturn<'depositNFT(axfer,address,uint64[])void'>]>

  /**
   * Makes a clear_state call to an existing instance of the AsaGoldSmartcontract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AsaGoldSmartcontractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AsaGoldSmartcontractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<AsaGoldSmartcontractComposerResults<TReturns>>
}
export type AsaGoldSmartcontractComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
