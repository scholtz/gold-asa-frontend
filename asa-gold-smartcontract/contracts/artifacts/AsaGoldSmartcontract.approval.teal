#pragma version 9

// This TEAL was generated by TEALScript v0.60.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// createApplication(uint64)void
abi_route_createApplication:
	// fee: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 1 0

	// contracts/asa-gold-smartcontract.algo.ts:46
	// this.governor.value = this.txn.sender
	byte 0x67 // "g"
	txn Sender
	app_global_put

	// contracts/asa-gold-smartcontract.algo.ts:47
	// this.fee.value = fee
	byte 0x66 // "f"
	frame_dig -1 // fee: uint64
	app_global_put
	retsub

// sellAssetWithDeposit(uint64,uint64,asset,asset,address,axfer)void
//
// Deposit Gold coin NFT, set seller owner and price for sale
//
// @param nftDepositTx NFT deposit tx
// @param vaultOwnerAddress Address of the account which can set state Shipped to customer
// @param weight The weight of the gold contained in the gold coin
// @param price The price in gold token for which the asset can be sold to clients
// @returns The sum of a and b
abi_route_sellAssetWithDeposit:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// price: uint64
	txna ApplicationArgs 5
	btoi

	// weight: uint64
	txna ApplicationArgs 4
	btoi

	// tokenAsset: asset
	txna ApplicationArgs 3
	btoi
	txnas Assets

	// nftAsset: asset
	txna ApplicationArgs 2
	btoi
	txnas Assets

	// vaultOwnerAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// nftDepositTx: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute sellAssetWithDeposit(uint64,uint64,asset,asset,address,axfer)void
	callsub sellAssetWithDeposit
	int 1
	return

sellAssetWithDeposit:
	proto 7 0

	// contracts/asa-gold-smartcontract.algo.ts:66
	// assert(!this.data(nftDepositTx.xferAsset).exists)
	frame_dig -1 // nftDepositTx: axfer
	gtxns XferAsset
	itob
	box_len
	swap
	pop
	!
	assert

	// contracts/asa-gold-smartcontract.algo.ts:67
	// assert(weight > 0)
	frame_dig -5 // weight: uint64
	int 0
	>
	assert

	// contracts/asa-gold-smartcontract.algo.ts:68
	// assert(tokenAsset.reserve.hasAsset(tokenAsset))
	frame_dig -4 // tokenAsset: asset
	asset_params_get AssetReserve
	assert
	frame_dig -4 // tokenAsset: asset
	asset_holding_get AssetBalance
	swap
	pop
	assert

	// contracts/asa-gold-smartcontract.algo.ts:69
	// newItem: AsaData = {
	//       state: 1,
	//       seller: tokenAsset.reserve,
	//       owner: this.txn.sender, //person who made deposit of this nft is owner
	//       vaultOwnerAddress: vaultOwnerAddress, //when the sale is done, the received assets will go back to reserve account of the gold token
	//       weight: weight,
	//       quoteAsset1: price,
	//       asset1: tokenAsset,
	//       quoteAsset2: 0, //initial deposit can be sold only for the gold token asset
	//       asset2: Asset.zeroIndex,
	//       quoteAsset3: 0,
	//       asset3: Asset.zeroIndex,
	//       quoteAsset4: 0,
	//       asset4: Asset.zeroIndex,
	//       quoteAsset5: 0,
	//       asset5: Asset.zeroIndex
	//     }
	byte 0x0000000000000001
	frame_dig -4 // tokenAsset: asset
	asset_params_get AssetReserve
	assert
	concat
	txn Sender
	concat
	frame_dig -2 // vaultOwnerAddress: address
	concat
	frame_dig -5 // weight: uint64
	itob
	concat
	frame_dig -6 // price: uint64
	itob
	concat
	frame_dig -4 // tokenAsset: asset
	itob
	concat
	byte 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	concat
	frame_bury -7 // newItem: AsaData

	// contracts/asa-gold-smartcontract.algo.ts:86
	// verifyTxn(nftDepositTx, {
	//       assetAmount: { greaterThan: 0 },
	//       assetReceiver: this.app.address,
	//       sender: this.txn.sender
	//     })
	// verify assetAmount
	frame_dig -1 // nftDepositTx: axfer
	gtxns AssetAmount
	int 0
	>
	assert

	// verify assetReceiver
	frame_dig -1 // nftDepositTx: axfer
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify sender
	frame_dig -1 // nftDepositTx: axfer
	gtxns Sender
	txn Sender
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:92
	// assert(nftDepositTx.xferAsset.total == 1)
	frame_dig -1 // nftDepositTx: axfer
	gtxns XferAsset
	asset_params_get AssetTotal
	assert
	int 1
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:94
	// assert(this.app.address.assetBalance(nftDepositTx.xferAsset) == 1)
	global CurrentApplicationAddress
	frame_dig -1 // nftDepositTx: axfer
	gtxns XferAsset
	asset_holding_get AssetBalance
	assert
	int 1
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:95
	// assert(nftDepositTx.xferAsset == nftAsset)
	frame_dig -1 // nftDepositTx: axfer
	gtxns XferAsset
	frame_dig -3 // nftAsset: asset
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:98
	// this.data(nftAsset).value = newItem
	frame_dig -3 // nftAsset: asset
	itob
	frame_dig -7 // newItem: AsaData
	box_put
	retsub

// buyNFT(asset,axfer)void
//
// Client can buy NFT which is for sale on the reserve sale or secondary sale
//
// @param purchaseAssetDepositTx Transfer to the smart contract with the purchase price
// @param nftAsset Identifies NFT which client wants to buy
abi_route_buyNFT:
	byte 0x; dupn 3 // push empty bytes to fill the stack frame for this subroutine's local variables

	// nftAsset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// purchaseAssetDepositTx: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute buyNFT(asset,axfer)void
	callsub buyNFT
	int 1
	return

buyNFT:
	proto 6 0

	// contracts/asa-gold-smartcontract.algo.ts:115
	// old = this.data(nftAsset).value
	frame_dig -2 // nftAsset: asset
	itob
	frame_bury -3 // storage key//old

	// contracts/asa-gold-smartcontract.algo.ts:117
	// newItem: AsaData = {
	//       state: 2, // not for sale .. user can set it for sale later, request nft to be withdrawn or request parcel delivery
	//       seller: this.txn.sender,
	//       owner: this.txn.sender,
	//       vaultOwnerAddress: old.vaultOwnerAddress,
	//       weight: old.weight,
	//       quoteAsset1: 0,
	//       asset1: Asset.zeroIndex,
	//       quoteAsset2: 0,
	//       asset2: Asset.zeroIndex,
	//       quoteAsset3: 0,
	//       asset3: Asset.zeroIndex,
	//       quoteAsset4: 0,
	//       asset4: Asset.zeroIndex,
	//       quoteAsset5: 0,
	//       asset5: Asset.zeroIndex
	//     }
	byte 0x0000000000000002
	txn Sender
	concat
	txn Sender
	concat
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 72 32
	concat
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 104 8
	btoi
	itob
	concat
	byte 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	concat
	frame_bury -4 // newItem: AsaData

	// contracts/asa-gold-smartcontract.algo.ts:135
	// verifyTxn(purchaseAssetDepositTx, {
	//       assetAmount: { greaterThan: 0 },
	//       assetReceiver: this.app.address,
	//       sender: this.txn.sender
	//     })
	// verify assetAmount
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns AssetAmount
	int 0
	>
	assert

	// verify assetReceiver
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify sender
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns Sender
	txn Sender
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:141
	// verifiedQuotation = false
	int 0
	frame_bury -5 // verifiedQuotation: bool

	// if0_condition
	// contracts/asa-gold-smartcontract.algo.ts:142
	// old.asset1 == purchaseAssetDepositTx.xferAsset && old.quoteAsset1 > 0
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 120 8
	btoi
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns XferAsset
	==
	dup
	bz skip_and0
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 112 8
	btoi
	int 0
	>
	&&

skip_and0:
	bz if0_end

	// if0_consequent
	// contracts/asa-gold-smartcontract.algo.ts:143
	// assert(old.quoteAsset1 == purchaseAssetDepositTx.assetAmount)
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 112 8
	btoi
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns AssetAmount
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:144
	// verifiedQuotation = true
	int 1
	frame_bury -5 // verifiedQuotation: bool

if0_end:
	// if1_condition
	// contracts/asa-gold-smartcontract.algo.ts:146
	// old.asset2 == purchaseAssetDepositTx.xferAsset && old.quoteAsset2 > 0
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 136 8
	btoi
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns XferAsset
	==
	dup
	bz skip_and1
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 128 8
	btoi
	int 0
	>
	&&

skip_and1:
	bz if1_end

	// if1_consequent
	// contracts/asa-gold-smartcontract.algo.ts:147
	// assert(old.quoteAsset2 == purchaseAssetDepositTx.assetAmount)
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 128 8
	btoi
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns AssetAmount
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:148
	// verifiedQuotation = true
	int 1
	frame_bury -5 // verifiedQuotation: bool

if1_end:
	// if2_condition
	// contracts/asa-gold-smartcontract.algo.ts:150
	// old.asset3 == purchaseAssetDepositTx.xferAsset && old.quoteAsset3 > 0
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 152 8
	btoi
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns XferAsset
	==
	dup
	bz skip_and2
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 144 8
	btoi
	int 0
	>
	&&

skip_and2:
	bz if2_end

	// if2_consequent
	// contracts/asa-gold-smartcontract.algo.ts:151
	// assert(old.quoteAsset3 == purchaseAssetDepositTx.assetAmount)
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 144 8
	btoi
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns AssetAmount
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:152
	// verifiedQuotation = true
	int 1
	frame_bury -5 // verifiedQuotation: bool

if2_end:
	// if3_condition
	// contracts/asa-gold-smartcontract.algo.ts:154
	// old.asset4 == purchaseAssetDepositTx.xferAsset && old.quoteAsset4 > 0
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 168 8
	btoi
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns XferAsset
	==
	dup
	bz skip_and3
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 160 8
	btoi
	int 0
	>
	&&

skip_and3:
	bz if3_end

	// if3_consequent
	// contracts/asa-gold-smartcontract.algo.ts:155
	// assert(old.quoteAsset4 == purchaseAssetDepositTx.assetAmount)
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 160 8
	btoi
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns AssetAmount
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:156
	// verifiedQuotation = true
	int 1
	frame_bury -5 // verifiedQuotation: bool

if3_end:
	// if4_condition
	// contracts/asa-gold-smartcontract.algo.ts:158
	// old.asset5 == purchaseAssetDepositTx.xferAsset && old.quoteAsset5 > 0
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 184 8
	btoi
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns XferAsset
	==
	dup
	bz skip_and4
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 176 8
	btoi
	int 0
	>
	&&

skip_and4:
	bz if4_end

	// if4_consequent
	// contracts/asa-gold-smartcontract.algo.ts:159
	// assert(old.quoteAsset5 == purchaseAssetDepositTx.assetAmount)
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 176 8
	btoi
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns AssetAmount
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:160
	// verifiedQuotation = true
	int 1
	frame_bury -5 // verifiedQuotation: bool

if4_end:
	// contracts/asa-gold-smartcontract.algo.ts:162
	// assert(verifiedQuotation)
	frame_dig -5 // verifiedQuotation: bool
	assert

	// contracts/asa-gold-smartcontract.algo.ts:164
	// assert(old.state == 1 || old.state == 3)
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 0 8
	btoi
	int 1
	==
	dup
	bnz skip_or0
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 0 8
	btoi
	int 3
	==
	||

skip_or0:
	assert

	// contracts/asa-gold-smartcontract.algo.ts:165
	// assert(newItem.state == 2)
	frame_dig -4 // newItem: AsaData
	extract 0 8
	btoi
	int 2
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:167
	// assert(this.app.address.assetBalance(nftAsset) == 1)
	global CurrentApplicationAddress
	frame_dig -2 // nftAsset: asset
	asset_holding_get AssetBalance
	assert
	int 1
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:169
	// fee = (purchaseAssetDepositTx.assetAmount * this.fee.value) / SCALE
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns AssetAmount
	byte 0x66 // "f"
	app_global_get
	*
	int 10_000
	/
	frame_bury -6 // fee: uint64

	// contracts/asa-gold-smartcontract.algo.ts:172
	// sendAssetTransfer({
	//       assetAmount: fee,
	//       xferAsset: purchaseAssetDepositTx.xferAsset,
	//       assetReceiver: this.governor.value,
	//       fee: 2000
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/asa-gold-smartcontract.algo.ts:173
	// assetAmount: fee
	frame_dig -6 // fee: uint64
	itxn_field AssetAmount

	// contracts/asa-gold-smartcontract.algo.ts:174
	// xferAsset: purchaseAssetDepositTx.xferAsset
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns XferAsset
	itxn_field XferAsset

	// contracts/asa-gold-smartcontract.algo.ts:175
	// assetReceiver: this.governor.value
	byte 0x67 // "g"
	app_global_get
	itxn_field AssetReceiver

	// contracts/asa-gold-smartcontract.algo.ts:176
	// fee: 2000
	int 2000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/asa-gold-smartcontract.algo.ts:180
	// sendAssetTransfer({
	//       assetAmount: purchaseAssetDepositTx.assetAmount - fee,
	//       xferAsset: purchaseAssetDepositTx.xferAsset,
	//       assetReceiver: old.seller,
	//       fee: 3000
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/asa-gold-smartcontract.algo.ts:181
	// assetAmount: purchaseAssetDepositTx.assetAmount - fee
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns AssetAmount
	frame_dig -6 // fee: uint64
	-
	itxn_field AssetAmount

	// contracts/asa-gold-smartcontract.algo.ts:182
	// xferAsset: purchaseAssetDepositTx.xferAsset
	frame_dig -1 // purchaseAssetDepositTx: axfer
	gtxns XferAsset
	itxn_field XferAsset

	// contracts/asa-gold-smartcontract.algo.ts:183
	// assetReceiver: old.seller
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 8 32
	itxn_field AssetReceiver

	// contracts/asa-gold-smartcontract.algo.ts:184
	// fee: 3000
	int 3000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/asa-gold-smartcontract.algo.ts:188
	// this.data(nftAsset).value = newItem
	frame_dig -2 // nftAsset: asset
	itob
	frame_dig -4 // newItem: AsaData
	box_put
	retsub

// changeQuotation(string,asset)void
//
// Change price quotes for NFT on sale
//
// @param nftAsset The gold coin NFT asset
// @param numbers The bytes containing quoteAsset1, asset1, quoteAsset2 .. asset5
abi_route_changeQuotation:
	byte 0x; dup // push empty bytes to fill the stack frame for this subroutine's local variables

	// numbers: string
	txna ApplicationArgs 2
	extract 2 0

	// nftAsset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute changeQuotation(string,asset)void
	callsub changeQuotation
	int 1
	return

changeQuotation:
	proto 4 0

	// contracts/asa-gold-smartcontract.algo.ts:203
	// old = this.data(nftAsset).value
	frame_dig -1 // nftAsset: asset
	itob
	frame_bury -3 // storage key//old

	// contracts/asa-gold-smartcontract.algo.ts:205
	// newItem: AsaData = {
	//       state: old.state,
	//       seller: old.seller,
	//       owner: old.owner,
	//       vaultOwnerAddress: old.vaultOwnerAddress,
	//       weight: old.weight,
	//       quoteAsset1: btoi(substring3(numbers, 0, 8)),
	//       asset1: Asset.fromID(btoi(substring3(numbers, 8, 8))),
	//       quoteAsset2: btoi(substring3(numbers, 16, 8)),
	//       asset2: Asset.fromID(btoi(substring3(numbers, 24, 8))),
	//       quoteAsset3: btoi(substring3(numbers, 32, 8)),
	//       asset3: Asset.fromID(btoi(substring3(numbers, 40, 8))),
	//       quoteAsset4: btoi(substring3(numbers, 48, 8)),
	//       asset4: Asset.fromID(btoi(substring3(numbers, 56, 8))),
	//       quoteAsset5: btoi(substring3(numbers, 64, 8)),
	//       asset5: Asset.fromID(btoi(substring3(numbers, 72, 8)))
	//     }
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 0 8
	btoi
	itob
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 8 32
	concat
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 40 32
	concat
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 72 32
	concat
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 104 8
	btoi
	itob
	concat
	frame_dig -2 // numbers: bytes
	int 0
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -2 // numbers: bytes
	int 8
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -2 // numbers: bytes
	int 16
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -2 // numbers: bytes
	int 24
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -2 // numbers: bytes
	int 32
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -2 // numbers: bytes
	int 40
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -2 // numbers: bytes
	int 48
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -2 // numbers: bytes
	int 56
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -2 // numbers: bytes
	int 64
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -2 // numbers: bytes
	int 72
	int 8
	substring3
	btoi
	itob
	concat
	frame_bury -4 // newItem: AsaData

	// contracts/asa-gold-smartcontract.algo.ts:223
	// assert(this.txn.sender == old.owner)
	txn Sender
	frame_dig -3 // storage key//old
	box_get
	assert
	extract 40 32
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:225
	// assert(this.app.address.assetBalance(nftAsset) == 1)
	global CurrentApplicationAddress
	frame_dig -1 // nftAsset: asset
	asset_holding_get AssetBalance
	assert
	int 1
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:226
	// assert(newItem.state == 1 || newItem.state == 3)
	frame_dig -4 // newItem: AsaData
	extract 0 8
	btoi
	int 1
	==
	dup
	bnz skip_or1
	frame_dig -4 // newItem: AsaData
	extract 0 8
	btoi
	int 3
	==
	||

skip_or1:
	assert

	// contracts/asa-gold-smartcontract.algo.ts:228
	// this.data(nftAsset).value = newItem
	frame_dig -1 // nftAsset: asset
	itob
	frame_dig -4 // newItem: AsaData
	box_put
	retsub

// requestParcelDelivery(asset)void
abi_route_requestParcelDelivery:
	byte 0x; dup // push empty bytes to fill the stack frame for this subroutine's local variables

	// nftAsset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute requestParcelDelivery(asset)void
	callsub requestParcelDelivery
	int 1
	return

requestParcelDelivery:
	proto 3 0

	// contracts/asa-gold-smartcontract.algo.ts:232
	// old = this.data(nftAsset).value
	frame_dig -1 // nftAsset: asset
	itob
	frame_bury -2 // storage key//old

	// contracts/asa-gold-smartcontract.algo.ts:234
	// newItem: AsaData = {
	//       state: 4, // 3 - request parcel delivery by owner
	//       seller: old.seller,
	//       owner: old.owner,
	//       vaultOwnerAddress: old.vaultOwnerAddress,
	//       weight: old.weight,
	//       quoteAsset1: 0,
	//       asset1: Asset.zeroIndex,
	//       quoteAsset2: 0,
	//       asset2: Asset.zeroIndex,
	//       quoteAsset3: 0,
	//       asset3: Asset.zeroIndex,
	//       quoteAsset4: 0,
	//       asset4: Asset.zeroIndex,
	//       quoteAsset5: 0,
	//       asset5: Asset.zeroIndex
	//     }
	byte 0x0000000000000004
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 8 32
	concat
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 40 32
	concat
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 72 32
	concat
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 104 8
	btoi
	itob
	concat
	byte 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	concat
	frame_bury -3 // newItem: AsaData

	// contracts/asa-gold-smartcontract.algo.ts:251
	// assert(old.state == 2 || old.state == 3)
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 0 8
	btoi
	int 2
	==
	dup
	bnz skip_or2
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 0 8
	btoi
	int 3
	==
	||

skip_or2:
	assert

	// contracts/asa-gold-smartcontract.algo.ts:252
	// assert(this.txn.sender == old.owner)
	txn Sender
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 40 32
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:254
	// this.data(nftAsset).value = newItem
	frame_dig -1 // nftAsset: asset
	itob
	frame_dig -3 // newItem: AsaData
	box_put
	retsub

// setParcelDelivery(asset)void
abi_route_setParcelDelivery:
	byte 0x; dup // push empty bytes to fill the stack frame for this subroutine's local variables

	// nftAsset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute setParcelDelivery(asset)void
	callsub setParcelDelivery
	int 1
	return

setParcelDelivery:
	proto 3 0

	// contracts/asa-gold-smartcontract.algo.ts:257
	// old = this.data(nftAsset).value
	frame_dig -1 // nftAsset: asset
	itob
	frame_bury -2 // storage key//old

	// contracts/asa-gold-smartcontract.algo.ts:259
	// newItem: AsaData = {
	//       state: 5, // 5 - parcel confirmed by vault owner
	//       seller: old.seller,
	//       owner: old.owner,
	//       vaultOwnerAddress: old.vaultOwnerAddress,
	//       weight: old.weight,
	//       quoteAsset1: 0,
	//       asset1: Asset.zeroIndex,
	//       quoteAsset2: 0,
	//       asset2: Asset.zeroIndex,
	//       quoteAsset3: 0,
	//       asset3: Asset.zeroIndex,
	//       quoteAsset4: 0,
	//       asset4: Asset.zeroIndex,
	//       quoteAsset5: 0,
	//       asset5: Asset.zeroIndex
	//     }
	byte 0x0000000000000005
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 8 32
	concat
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 40 32
	concat
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 72 32
	concat
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 104 8
	btoi
	itob
	concat
	byte 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	concat
	frame_bury -3 // newItem: AsaData

	// contracts/asa-gold-smartcontract.algo.ts:276
	// assert(old.state == 4)
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 0 8
	btoi
	int 4
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:277
	// assert(this.txn.sender == old.vaultOwnerAddress)
	txn Sender
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 72 32
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:279
	// this.data(nftAsset).value = newItem
	frame_dig -1 // nftAsset: asset
	itob
	frame_dig -3 // newItem: AsaData
	box_put
	retsub

// setNotForSale(asset)void
abi_route_setNotForSale:
	byte 0x; dup // push empty bytes to fill the stack frame for this subroutine's local variables

	// nftAsset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute setNotForSale(asset)void
	callsub setNotForSale
	int 1
	return

setNotForSale:
	proto 3 0

	// contracts/asa-gold-smartcontract.algo.ts:282
	// old = this.data(nftAsset).value
	frame_dig -1 // nftAsset: asset
	itob
	frame_bury -2 // storage key//old

	// contracts/asa-gold-smartcontract.algo.ts:283
	// newItem: AsaData = {
	//       state: 2, // 2 - not for sale
	//       seller: old.seller,
	//       owner: old.owner,
	//       vaultOwnerAddress: old.vaultOwnerAddress,
	//       weight: old.weight,
	//       quoteAsset1: 0,
	//       asset1: Asset.zeroIndex,
	//       quoteAsset2: 0,
	//       asset2: Asset.zeroIndex,
	//       quoteAsset3: 0,
	//       asset3: Asset.zeroIndex,
	//       quoteAsset4: 0,
	//       asset4: Asset.zeroIndex,
	//       quoteAsset5: 0,
	//       asset5: Asset.zeroIndex
	//     }
	byte 0x0000000000000002
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 8 32
	concat
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 40 32
	concat
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 72 32
	concat
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 104 8
	btoi
	itob
	concat
	byte 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	concat
	frame_bury -3 // newItem: AsaData

	// contracts/asa-gold-smartcontract.algo.ts:300
	// assert(old.state == 3)
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 0 8
	btoi
	int 3
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:301
	// assert(this.txn.sender == old.owner)
	txn Sender
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 40 32
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:303
	// this.data(nftAsset).value = newItem
	frame_dig -1 // nftAsset: asset
	itob
	frame_dig -3 // newItem: AsaData
	box_put
	retsub

// withdrawNFT(asset)void
abi_route_withdrawNFT:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// nftAsset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute withdrawNFT(asset)void
	callsub withdrawNFT
	int 1
	return

withdrawNFT:
	proto 2 0

	// contracts/asa-gold-smartcontract.algo.ts:306
	// old = this.data(nftAsset).value
	frame_dig -1 // nftAsset: asset
	itob
	frame_bury -2 // storage key//old

	// contracts/asa-gold-smartcontract.algo.ts:308
	// assert(this.txn.sender == old.owner)
	txn Sender
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 40 32
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:309
	// assert(old.state == 2 || old.state == 4 || old.state == 5)
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 0 8
	btoi
	int 2
	==
	dup
	bnz skip_or3
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 0 8
	btoi
	int 4
	==
	||

skip_or3:
	dup
	bnz skip_or4
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 0 8
	btoi
	int 5
	==
	||

skip_or4:
	assert

	// contracts/asa-gold-smartcontract.algo.ts:312
	// sendAssetTransfer({
	//       assetAmount: 1,
	//       xferAsset: nftAsset,
	//       assetReceiver: old.owner,
	//       fee: 4000
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/asa-gold-smartcontract.algo.ts:313
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// contracts/asa-gold-smartcontract.algo.ts:314
	// xferAsset: nftAsset
	frame_dig -1 // nftAsset: asset
	itxn_field XferAsset

	// contracts/asa-gold-smartcontract.algo.ts:315
	// assetReceiver: old.owner
	frame_dig -2 // storage key//old
	box_get
	assert
	extract 40 32
	itxn_field AssetReceiver

	// contracts/asa-gold-smartcontract.algo.ts:316
	// fee: 4000
	int 4000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// optinAsset(asset)void
abi_route_optinAsset:
	// nftAsset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute optinAsset(asset)void
	callsub optinAsset
	int 1
	return

optinAsset:
	proto 1 0

	// contracts/asa-gold-smartcontract.algo.ts:321
	// sendAssetTransfer({
	//       assetAmount: 0,
	//       xferAsset: nftAsset,
	//       assetReceiver: this.app.address,
	//       fee: 0
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/asa-gold-smartcontract.algo.ts:322
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/asa-gold-smartcontract.algo.ts:323
	// xferAsset: nftAsset
	frame_dig -1 // nftAsset: asset
	itxn_field XferAsset

	// contracts/asa-gold-smartcontract.algo.ts:324
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/asa-gold-smartcontract.algo.ts:325
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// depositNFT(string,address,axfer)void
abi_route_depositNFT:
	byte 0x; dup // push empty bytes to fill the stack frame for this subroutine's local variables

	// numbers: string
	txna ApplicationArgs 2
	extract 2 0

	// seller: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// nftDepositTx: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute depositNFT(string,address,axfer)void
	callsub depositNFT
	int 1
	return

depositNFT:
	proto 5 0

	// contracts/asa-gold-smartcontract.algo.ts:329
	// assert(this.data(nftDepositTx.xferAsset).exists)
	frame_dig -1 // nftDepositTx: axfer
	gtxns XferAsset
	itob
	box_len
	swap
	pop
	assert

	// contracts/asa-gold-smartcontract.algo.ts:330
	// old = this.data(nftDepositTx.xferAsset).value
	frame_dig -1 // nftDepositTx: axfer
	gtxns XferAsset
	itob
	frame_bury -4 // storage key//old

	// contracts/asa-gold-smartcontract.algo.ts:332
	// newItem: AsaData = {
	//       state: 3,
	//       seller: seller,
	//       owner: this.txn.sender,
	//       vaultOwnerAddress: old.vaultOwnerAddress,
	//       weight: old.weight,
	//       quoteAsset1: btoi(substring3(numbers, 0, 8)),
	//       asset1: Asset.fromID(btoi(substring3(numbers, 8, 8))),
	//       quoteAsset2: btoi(substring3(numbers, 16, 8)),
	//       asset2: Asset.fromID(btoi(substring3(numbers, 24, 8))),
	//       quoteAsset3: btoi(substring3(numbers, 32, 8)),
	//       asset3: Asset.fromID(btoi(substring3(numbers, 40, 8))),
	//       quoteAsset4: btoi(substring3(numbers, 48, 8)),
	//       asset4: Asset.fromID(btoi(substring3(numbers, 56, 8))),
	//       quoteAsset5: btoi(substring3(numbers, 64, 8)),
	//       asset5: Asset.fromID(btoi(substring3(numbers, 72, 8)))
	//     }
	byte 0x0000000000000003
	frame_dig -2 // seller: address
	concat
	txn Sender
	concat
	frame_dig -4 // storage key//old
	box_get
	assert
	extract 72 32
	concat
	frame_dig -4 // storage key//old
	box_get
	assert
	extract 104 8
	btoi
	itob
	concat
	frame_dig -3 // numbers: bytes
	int 0
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -3 // numbers: bytes
	int 8
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -3 // numbers: bytes
	int 16
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -3 // numbers: bytes
	int 24
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -3 // numbers: bytes
	int 32
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -3 // numbers: bytes
	int 40
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -3 // numbers: bytes
	int 48
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -3 // numbers: bytes
	int 56
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -3 // numbers: bytes
	int 64
	int 8
	substring3
	btoi
	itob
	concat
	frame_dig -3 // numbers: bytes
	int 72
	int 8
	substring3
	btoi
	itob
	concat
	frame_bury -5 // newItem: AsaData

	// contracts/asa-gold-smartcontract.algo.ts:350
	// verifyTxn(nftDepositTx, {
	//       assetAmount: { greaterThan: 0 },
	//       assetReceiver: this.app.address,
	//       sender: this.txn.sender
	//     })
	// verify assetAmount
	frame_dig -1 // nftDepositTx: axfer
	gtxns AssetAmount
	int 0
	>
	assert

	// verify assetReceiver
	frame_dig -1 // nftDepositTx: axfer
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify sender
	frame_dig -1 // nftDepositTx: axfer
	gtxns Sender
	txn Sender
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:357
	// assert(this.app.address.assetBalance(nftDepositTx.xferAsset) == 1)
	global CurrentApplicationAddress
	frame_dig -1 // nftDepositTx: axfer
	gtxns XferAsset
	asset_holding_get AssetBalance
	assert
	int 1
	==
	assert

	// contracts/asa-gold-smartcontract.algo.ts:358
	// assert(old.state == 2 || old.state == 3)
	frame_dig -4 // storage key//old
	box_get
	assert
	extract 0 8
	btoi
	int 2
	==
	dup
	bnz skip_or5
	frame_dig -4 // storage key//old
	box_get
	assert
	extract 0 8
	btoi
	int 3
	==
	||

skip_or5:
	assert

	// contracts/asa-gold-smartcontract.algo.ts:361
	// this.data(nftDepositTx.xferAsset).value = newItem
	frame_dig -1 // nftDepositTx: axfer
	gtxns XferAsset
	itob
	frame_dig -5 // newItem: AsaData
	box_put
	retsub

create_NoOp:
	method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "sellAssetWithDeposit(axfer,address,asset,asset,uint64,uint64)void"
	method "buyNFT(axfer,asset)void"
	method "changeQuotation(asset,string)void"
	method "requestParcelDelivery(asset)void"
	method "setParcelDelivery(asset)void"
	method "setNotForSale(asset)void"
	method "withdrawNFT(asset)void"
	method "optinAsset(asset)void"
	method "depositNFT(axfer,address,string)void"
	txna ApplicationArgs 0
	match abi_route_sellAssetWithDeposit abi_route_buyNFT abi_route_changeQuotation abi_route_requestParcelDelivery abi_route_setParcelDelivery abi_route_setNotForSale abi_route_withdrawNFT abi_route_optinAsset abi_route_depositNFT
	err