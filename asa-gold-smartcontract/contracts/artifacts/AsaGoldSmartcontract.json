{
  "hints": {
    "createApplication(uint64,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "sellAssetWithDeposit(axfer,address,asset,asset,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buyNFT(axfer,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeQuotation(asset,uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "requestParcelDelivery(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setParcelDelivery(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setNotForSale(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdrawNFT(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optinAsset(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "depositNFT(axfer,address,uint64[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "governor": {
          "type": "bytes",
          "key": "g"
        },
        "fee": {
          "type": "uint64",
          "key": "f"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuNjAuMQovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlcHNlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIk5PVF9JTVBMTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECmludCAwCj4KaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoIGNyZWF0ZV9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY2FsbF9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIGNhbGxfVXBkYXRlQXBwbGljYXRpb24KCk5PVF9JTVBMRU1FTlRFRDoKCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24oYWRkcmVzcyx1aW50NjQpdm9pZAphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBnb3Zlcm5vcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGZlZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzLHVpbnQ2NCl2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgpjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6NDcKCS8vIHRoaXMuZ292ZXJub3IudmFsdWUgPSBnb3Zlcm5vcgoJYnl0ZSAweDY3IC8vICJnIgoJZnJhbWVfZGlnIC0yIC8vIGdvdmVybm9yOiBhZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6NDgKCS8vIHRoaXMuZmVlLnZhbHVlID0gZmVlCglieXRlIDB4NjYgLy8gImYiCglmcmFtZV9kaWcgLTEgLy8gZmVlOiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIHVwZGF0ZUFwcGxpY2F0aW9uKCl2b2lkCi8vCi8vIENyZWF0b3IgaXMgYWxsb3dlZCB0byB1cGRhdGUgYXBwbGljYXRpb24KYWJpX3JvdXRlX3VwZGF0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSB1cGRhdGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiB1cGRhdGVBcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKdXBkYXRlQXBwbGljYXRpb246Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjU0CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFwcC5jcmVhdG9yKQoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJYXNzZXJ0Cgk9PQoJYXNzZXJ0CglyZXRzdWIKCi8vIHNlbGxBc3NldFdpdGhEZXBvc2l0KHVpbnQ2NCx1aW50NjQsYXNzZXQsYXNzZXQsYWRkcmVzcyxheGZlcil2b2lkCi8vCi8vIERlcG9zaXQgR29sZCBjb2luIE5GVCwgc2V0IHNlbGxlciBvd25lciBhbmQgcHJpY2UgZm9yIHNhbGUKLy8KLy8gQHBhcmFtIG5mdERlcG9zaXRUeCBORlQgZGVwb3NpdCB0eAovLyBAcGFyYW0gdmF1bHRPd25lckFkZHJlc3MgQWRkcmVzcyBvZiB0aGUgYWNjb3VudCB3aGljaCBjYW4gc2V0IHN0YXRlIFNoaXBwZWQgdG8gY3VzdG9tZXIKLy8gQHBhcmFtIHdlaWdodCBUaGUgd2VpZ2h0IG9mIHRoZSBnb2xkIGNvbnRhaW5lZCBpbiB0aGUgZ29sZCBjb2luCi8vIEBwYXJhbSBwcmljZSBUaGUgcHJpY2UgaW4gZ29sZCB0b2tlbiBmb3Igd2hpY2ggdGhlIGFzc2V0IGNhbiBiZSBzb2xkIHRvIGNsaWVudHMKLy8gQHJldHVybnMgVGhlIHN1bSBvZiBhIGFuZCBiCmFiaV9yb3V0ZV9zZWxsQXNzZXRXaXRoRGVwb3NpdDoKCWJ5dGUgMHg7IGR1cCAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyBwcmljZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA1CglidG9pCgoJLy8gd2VpZ2h0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWJ0b2kKCgkvLyB0b2tlbkFzc2V0OiBhc3NldAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoJdHhuYXMgQXNzZXRzCgoJLy8gbmZ0QXNzZXQ6IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyB2YXVsdE93bmVyQWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIG5mdERlcG9zaXRUeDogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IGF4ZmVyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzZWxsQXNzZXRXaXRoRGVwb3NpdCh1aW50NjQsdWludDY0LGFzc2V0LGFzc2V0LGFkZHJlc3MsYXhmZXIpdm9pZAoJY2FsbHN1YiBzZWxsQXNzZXRXaXRoRGVwb3NpdAoJaW50IDEKCXJldHVybgoKc2VsbEFzc2V0V2l0aERlcG9zaXQ6Cglwcm90byA4IDAKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjczCgkvLyBhc3NlcnQoIXRoaXMuZGF0YShuZnREZXBvc2l0VHgueGZlckFzc2V0KS5leGlzdHMpCglieXRlIDB4NjQgLy8gImQiCglmcmFtZV9kaWcgLTEgLy8gbmZ0RGVwb3NpdFR4OiBheGZlcgoJZ3R4bnMgWGZlckFzc2V0CglpdG9iCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJIQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czo3NAoJLy8gYXNzZXJ0KHdlaWdodCA+IDApCglmcmFtZV9kaWcgLTUgLy8gd2VpZ2h0OiB1aW50NjQKCWludCAwCgk+Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjc1CgkvLyBhc3NlcnQocHJpY2UgPiAwKQoJZnJhbWVfZGlnIC02IC8vIHByaWNlOiB1aW50NjQKCWludCAwCgk+Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjc2CgkvLyBhc3NlcnQodG9rZW5Bc3NldC5yZXNlcnZlLmhhc0Fzc2V0KHRva2VuQXNzZXQpKQoJZnJhbWVfZGlnIC00IC8vIHRva2VuQXNzZXQ6IGFzc2V0Cglhc3NldF9wYXJhbXNfZ2V0IEFzc2V0UmVzZXJ2ZQoJYXNzZXJ0CglmcmFtZV9kaWcgLTQgLy8gdG9rZW5Bc3NldDogYXNzZXQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJc3dhcAoJcG9wCglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjc3CgkvLyBuZXdJdGVtOiBBc2FEYXRhID0gewoJLy8gICAgICAgc3RhdGU6IDEsCgkvLyAgICAgICBzZWxsZXI6IHRva2VuQXNzZXQucmVzZXJ2ZSwKCS8vICAgICAgIG93bmVyOiB0aGlzLnR4bi5zZW5kZXIsIC8vcGVyc29uIHdobyBtYWRlIGRlcG9zaXQgb2YgdGhpcyBuZnQgaXMgb3duZXIKCS8vICAgICAgIHZhdWx0T3duZXJBZGRyZXNzOiB2YXVsdE93bmVyQWRkcmVzcywgLy93aGVuIHRoZSBzYWxlIGlzIGRvbmUsIHRoZSByZWNlaXZlZCBhc3NldHMgd2lsbCBnbyBiYWNrIHRvIHJlc2VydmUgYWNjb3VudCBvZiB0aGUgZ29sZCB0b2tlbgoJLy8gICAgICAgd2VpZ2h0OiB3ZWlnaHQsCgkvLyAgICAgICBxdW90ZUFzc2V0MTogcHJpY2UsCgkvLyAgICAgICBhc3NldDE6IHRva2VuQXNzZXQsCgkvLyAgICAgICBxdW90ZUFzc2V0MjogMCwgLy9pbml0aWFsIGRlcG9zaXQgY2FuIGJlIHNvbGQgb25seSBmb3IgdGhlIGdvbGQgdG9rZW4gYXNzZXQKCS8vICAgICAgIGFzc2V0MjogQXNzZXQuemVyb0luZGV4LAoJLy8gICAgICAgcXVvdGVBc3NldDM6IDAsCgkvLyAgICAgICBhc3NldDM6IEFzc2V0Lnplcm9JbmRleCwKCS8vICAgICAgIHF1b3RlQXNzZXQ0OiAwLAoJLy8gICAgICAgYXNzZXQ0OiBBc3NldC56ZXJvSW5kZXgsCgkvLyAgICAgICBxdW90ZUFzc2V0NTogMCwKCS8vICAgICAgIGFzc2V0NTogQXNzZXQuemVyb0luZGV4CgkvLyAgICAgfQoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDEKCWZyYW1lX2RpZyAtNCAvLyB0b2tlbkFzc2V0OiBhc3NldAoJYXNzZXRfcGFyYW1zX2dldCBBc3NldFJlc2VydmUKCWFzc2VydAoJY29uY2F0Cgl0eG4gU2VuZGVyCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyB2YXVsdE93bmVyQWRkcmVzczogYWRkcmVzcwoJY29uY2F0CglmcmFtZV9kaWcgLTUgLy8gd2VpZ2h0OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC02IC8vIHByaWNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC00IC8vIHRva2VuQXNzZXQ6IGFzc2V0CglpdG9iCgljb25jYXQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJY29uY2F0CglmcmFtZV9idXJ5IC03IC8vIG5ld0l0ZW06IEFzYURhdGEKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjk0CgkvLyB2ZXJpZnlUeG4obmZ0RGVwb3NpdFR4LCB7CgkvLyAgICAgICBhc3NldEFtb3VudDogeyBncmVhdGVyVGhhbjogMCB9LAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIHNlbmRlcjogdGhpcy50eG4uc2VuZGVyCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBhc3NldEFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG5mdERlcG9zaXRUeDogYXhmZXIKCWd0eG5zIEFzc2V0QW1vdW50CglpbnQgMAoJPgoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFzc2V0UmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBuZnREZXBvc2l0VHg6IGF4ZmVyCglndHhucyBBc3NldFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBuZnREZXBvc2l0VHg6IGF4ZmVyCglndHhucyBTZW5kZXIKCXR4biBTZW5kZXIKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjEwMAoJLy8gYXNzZXJ0KG5mdERlcG9zaXRUeC54ZmVyQXNzZXQudG90YWwgPT0gMSkKCWZyYW1lX2RpZyAtMSAvLyBuZnREZXBvc2l0VHg6IGF4ZmVyCglndHhucyBYZmVyQXNzZXQKCWFzc2V0X3BhcmFtc19nZXQgQXNzZXRUb3RhbAoJYXNzZXJ0CglpbnQgMQoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MTAyCgkvLyBhc3NlcnQodGhpcy5hcHAuYWRkcmVzcy5hc3NldEJhbGFuY2UobmZ0RGVwb3NpdFR4LnhmZXJBc3NldCkgPT0gMSkKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gbmZ0RGVwb3NpdFR4OiBheGZlcgoJZ3R4bnMgWGZlckFzc2V0Cglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCWFzc2VydAoJaW50IDEKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjEwMwoJLy8gYXNzZXJ0KG5mdERlcG9zaXRUeC54ZmVyQXNzZXQgPT0gbmZ0QXNzZXQpCglmcmFtZV9kaWcgLTEgLy8gbmZ0RGVwb3NpdFR4OiBheGZlcgoJZ3R4bnMgWGZlckFzc2V0CglmcmFtZV9kaWcgLTMgLy8gbmZ0QXNzZXQ6IGFzc2V0Cgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxMDYKCS8vIHRoaXMuZGF0YShuZnRBc3NldCkudmFsdWUgPSBuZXdJdGVtCglieXRlIDB4NjQgLy8gImQiCglmcmFtZV9kaWcgLTMgLy8gbmZ0QXNzZXQ6IGFzc2V0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtNyAvLyBuZXdJdGVtOiBBc2FEYXRhCglib3hfcHV0CgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxMDkKCS8vIG5ld1Jlc2VydmVzID0gbmV3SXRlbS53ZWlnaHQKCWZyYW1lX2RpZyAtNyAvLyBuZXdJdGVtOiBBc2FEYXRhCglleHRyYWN0IDEwNCA4CglidG9pCglmcmFtZV9idXJ5IC04IC8vIG5ld1Jlc2VydmVzOiB1aW50NjQKCgkvLyBpZjBfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjExMAoJLy8gdGhpcy5yZXNlcnZlcyh0b2tlbkFzc2V0KS5leGlzdHMKCWJ5dGUgMHg3MiAvLyAiciIKCWZyYW1lX2RpZyAtNCAvLyB0b2tlbkFzc2V0OiBhc3NldAoJaXRvYgoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCWJ6IGlmMF9lbmQKCgkvLyBpZjBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxMTEKCS8vIG5ld1Jlc2VydmVzID0gbmV3UmVzZXJ2ZXMgKyB0aGlzLnJlc2VydmVzKHRva2VuQXNzZXQpLnZhbHVlCglmcmFtZV9kaWcgLTggLy8gbmV3UmVzZXJ2ZXM6IHVpbnQ2NAoJYnl0ZSAweDcyIC8vICJyIgoJZnJhbWVfZGlnIC00IC8vIHRva2VuQXNzZXQ6IGFzc2V0CglpdG9iCgljb25jYXQKCWJveF9nZXQKCWFzc2VydAoJYnRvaQoJKwoJZnJhbWVfYnVyeSAtOCAvLyBuZXdSZXNlcnZlczogdWludDY0CgppZjBfZW5kOgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxMTMKCS8vIHRoaXMucmVzZXJ2ZXModG9rZW5Bc3NldCkudmFsdWUgPSBuZXdSZXNlcnZlcwoJYnl0ZSAweDcyIC8vICJyIgoJZnJhbWVfZGlnIC00IC8vIHRva2VuQXNzZXQ6IGFzc2V0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtOCAvLyBuZXdSZXNlcnZlczogdWludDY0CglpdG9iCglib3hfcHV0CglyZXRzdWIKCi8vIGJ1eU5GVChhc3NldCxheGZlcil2b2lkCi8vCi8vIENsaWVudCBjYW4gYnV5IE5GVCB3aGljaCBpcyBmb3Igc2FsZSBvbiB0aGUgcmVzZXJ2ZSBzYWxlIG9yIHNlY29uZGFyeSBzYWxlCi8vCi8vIEBwYXJhbSBwdXJjaGFzZUFzc2V0RGVwb3NpdFR4IFRyYW5zZmVyIHRvIHRoZSBzbWFydCBjb250cmFjdCB3aXRoIHRoZSBwdXJjaGFzZSBwcmljZQovLyBAcGFyYW0gbmZ0QXNzZXQgSWRlbnRpZmllcyBORlQgd2hpY2ggY2xpZW50IHdhbnRzIHRvIGJ1eQphYmlfcm91dGVfYnV5TkZUOgoJYnl0ZSAweDsgZHVwbiAzIC8vIHB1c2ggZW1wdHkgYnl0ZXMgdG8gZmlsbCB0aGUgc3RhY2sgZnJhbWUgZm9yIHRoaXMgc3Vicm91dGluZSdzIGxvY2FsIHZhcmlhYmxlcwoKCS8vIG5mdEFzc2V0OiBhc3NldAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoJdHhuYXMgQXNzZXRzCgoJLy8gcHVyY2hhc2VBc3NldERlcG9zaXRUeDogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IGF4ZmVyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBidXlORlQoYXNzZXQsYXhmZXIpdm9pZAoJY2FsbHN1YiBidXlORlQKCWludCAxCglyZXR1cm4KCmJ1eU5GVDoKCXByb3RvIDYgMAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MTIzCgkvLyBvbGQgPSB0aGlzLmRhdGEobmZ0QXNzZXQpLnZhbHVlCglieXRlIDB4NjQgLy8gImQiCglmcmFtZV9kaWcgLTIgLy8gbmZ0QXNzZXQ6IGFzc2V0CglpdG9iCgljb25jYXQKCWZyYW1lX2J1cnkgLTMgLy8gc3RvcmFnZSBrZXkvL29sZAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MTI1CgkvLyBuZXdJdGVtOiBBc2FEYXRhID0gewoJLy8gICAgICAgc3RhdGU6IDIsIC8vIG5vdCBmb3Igc2FsZSAuLiB1c2VyIGNhbiBzZXQgaXQgZm9yIHNhbGUgbGF0ZXIsIHJlcXVlc3QgbmZ0IHRvIGJlIHdpdGhkcmF3biBvciByZXF1ZXN0IHBhcmNlbCBkZWxpdmVyeQoJLy8gICAgICAgc2VsbGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICBvd25lcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgdmF1bHRPd25lckFkZHJlc3M6IG9sZC52YXVsdE93bmVyQWRkcmVzcywKCS8vICAgICAgIHdlaWdodDogb2xkLndlaWdodCwKCS8vICAgICAgIHF1b3RlQXNzZXQxOiAwLAoJLy8gICAgICAgYXNzZXQxOiBBc3NldC56ZXJvSW5kZXgsCgkvLyAgICAgICBxdW90ZUFzc2V0MjogMCwKCS8vICAgICAgIGFzc2V0MjogQXNzZXQuemVyb0luZGV4LAoJLy8gICAgICAgcXVvdGVBc3NldDM6IDAsCgkvLyAgICAgICBhc3NldDM6IEFzc2V0Lnplcm9JbmRleCwKCS8vICAgICAgIHF1b3RlQXNzZXQ0OiAwLAoJLy8gICAgICAgYXNzZXQ0OiBBc3NldC56ZXJvSW5kZXgsCgkvLyAgICAgICBxdW90ZUFzc2V0NTogMCwKCS8vICAgICAgIGFzc2V0NTogQXNzZXQuemVyb0luZGV4CgkvLyAgICAgfQoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDIKCXR4biBTZW5kZXIKCWNvbmNhdAoJdHhuIFNlbmRlcgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDcyIDMyCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMTA0IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtNCAvLyBuZXdJdGVtOiBBc2FEYXRhCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxNDMKCS8vIHZlcmlmeVR4bihwdXJjaGFzZUFzc2V0RGVwb3NpdFR4LCB7CgkvLyAgICAgICBhc3NldEFtb3VudDogeyBncmVhdGVyVGhhbjogMCB9LAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIHNlbmRlcjogdGhpcy50eG4uc2VuZGVyCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBhc3NldEFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHB1cmNoYXNlQXNzZXREZXBvc2l0VHg6IGF4ZmVyCglndHhucyBBc3NldEFtb3VudAoJaW50IDAKCT4KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldFJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gcHVyY2hhc2VBc3NldERlcG9zaXRUeDogYXhmZXIKCWd0eG5zIEFzc2V0UmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIHB1cmNoYXNlQXNzZXREZXBvc2l0VHg6IGF4ZmVyCglndHhucyBTZW5kZXIKCXR4biBTZW5kZXIKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE0OQoJLy8gdmVyaWZpZWRRdW90YXRpb24gPSBmYWxzZQoJaW50IDAKCWZyYW1lX2J1cnkgLTUgLy8gdmVyaWZpZWRRdW90YXRpb246IGJvb2wKCgkvLyBpZjFfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE1MAoJLy8gb2xkLmFzc2V0MSA9PSBwdXJjaGFzZUFzc2V0RGVwb3NpdFR4LnhmZXJBc3NldCAmJiBvbGQucXVvdGVBc3NldDEgPiAwCglmcmFtZV9kaWcgLTMgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDEyMCA4CglidG9pCglmcmFtZV9kaWcgLTEgLy8gcHVyY2hhc2VBc3NldERlcG9zaXRUeDogYXhmZXIKCWd0eG5zIFhmZXJBc3NldAoJPT0KCWR1cAoJYnogc2tpcF9hbmQwCglmcmFtZV9kaWcgLTMgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDExMiA4CglidG9pCglpbnQgMAoJPgoJJiYKCnNraXBfYW5kMDoKCWJ6IGlmMV9lbmQKCgkvLyBpZjFfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxNTEKCS8vIGFzc2VydChvbGQucXVvdGVBc3NldDEgPT0gcHVyY2hhc2VBc3NldERlcG9zaXRUeC5hc3NldEFtb3VudCkKCWZyYW1lX2RpZyAtMyAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMTEyIDgKCWJ0b2kKCWZyYW1lX2RpZyAtMSAvLyBwdXJjaGFzZUFzc2V0RGVwb3NpdFR4OiBheGZlcgoJZ3R4bnMgQXNzZXRBbW91bnQKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE1MgoJLy8gdmVyaWZpZWRRdW90YXRpb24gPSB0cnVlCglpbnQgMQoJZnJhbWVfYnVyeSAtNSAvLyB2ZXJpZmllZFF1b3RhdGlvbjogYm9vbAoKaWYxX2VuZDoKCS8vIGlmMl9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MTU0CgkvLyBvbGQuYXNzZXQyID09IHB1cmNoYXNlQXNzZXREZXBvc2l0VHgueGZlckFzc2V0ICYmIG9sZC5xdW90ZUFzc2V0MiA+IDAKCWZyYW1lX2RpZyAtMyAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMTM2IDgKCWJ0b2kKCWZyYW1lX2RpZyAtMSAvLyBwdXJjaGFzZUFzc2V0RGVwb3NpdFR4OiBheGZlcgoJZ3R4bnMgWGZlckFzc2V0Cgk9PQoJZHVwCglieiBza2lwX2FuZDEKCWZyYW1lX2RpZyAtMyAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMTI4IDgKCWJ0b2kKCWludCAwCgk+CgkmJgoKc2tpcF9hbmQxOgoJYnogaWYyX2VuZAoKCS8vIGlmMl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE1NQoJLy8gYXNzZXJ0KG9sZC5xdW90ZUFzc2V0MiA9PSBwdXJjaGFzZUFzc2V0RGVwb3NpdFR4LmFzc2V0QW1vdW50KQoJZnJhbWVfZGlnIC0zIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAxMjggOAoJYnRvaQoJZnJhbWVfZGlnIC0xIC8vIHB1cmNoYXNlQXNzZXREZXBvc2l0VHg6IGF4ZmVyCglndHhucyBBc3NldEFtb3VudAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MTU2CgkvLyB2ZXJpZmllZFF1b3RhdGlvbiA9IHRydWUKCWludCAxCglmcmFtZV9idXJ5IC01IC8vIHZlcmlmaWVkUXVvdGF0aW9uOiBib29sCgppZjJfZW5kOgoJLy8gaWYzX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxNTgKCS8vIG9sZC5hc3NldDMgPT0gcHVyY2hhc2VBc3NldERlcG9zaXRUeC54ZmVyQXNzZXQgJiYgb2xkLnF1b3RlQXNzZXQzID4gMAoJZnJhbWVfZGlnIC0zIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAxNTIgOAoJYnRvaQoJZnJhbWVfZGlnIC0xIC8vIHB1cmNoYXNlQXNzZXREZXBvc2l0VHg6IGF4ZmVyCglndHhucyBYZmVyQXNzZXQKCT09CglkdXAKCWJ6IHNraXBfYW5kMgoJZnJhbWVfZGlnIC0zIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAxNDQgOAoJYnRvaQoJaW50IDAKCT4KCSYmCgpza2lwX2FuZDI6CglieiBpZjNfZW5kCgoJLy8gaWYzX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MTU5CgkvLyBhc3NlcnQob2xkLnF1b3RlQXNzZXQzID09IHB1cmNoYXNlQXNzZXREZXBvc2l0VHguYXNzZXRBbW91bnQpCglmcmFtZV9kaWcgLTMgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDE0NCA4CglidG9pCglmcmFtZV9kaWcgLTEgLy8gcHVyY2hhc2VBc3NldERlcG9zaXRUeDogYXhmZXIKCWd0eG5zIEFzc2V0QW1vdW50Cgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxNjAKCS8vIHZlcmlmaWVkUXVvdGF0aW9uID0gdHJ1ZQoJaW50IDEKCWZyYW1lX2J1cnkgLTUgLy8gdmVyaWZpZWRRdW90YXRpb246IGJvb2wKCmlmM19lbmQ6CgkvLyBpZjRfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE2MgoJLy8gb2xkLmFzc2V0NCA9PSBwdXJjaGFzZUFzc2V0RGVwb3NpdFR4LnhmZXJBc3NldCAmJiBvbGQucXVvdGVBc3NldDQgPiAwCglmcmFtZV9kaWcgLTMgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDE2OCA4CglidG9pCglmcmFtZV9kaWcgLTEgLy8gcHVyY2hhc2VBc3NldERlcG9zaXRUeDogYXhmZXIKCWd0eG5zIFhmZXJBc3NldAoJPT0KCWR1cAoJYnogc2tpcF9hbmQzCglmcmFtZV9kaWcgLTMgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDE2MCA4CglidG9pCglpbnQgMAoJPgoJJiYKCnNraXBfYW5kMzoKCWJ6IGlmNF9lbmQKCgkvLyBpZjRfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxNjMKCS8vIGFzc2VydChvbGQucXVvdGVBc3NldDQgPT0gcHVyY2hhc2VBc3NldERlcG9zaXRUeC5hc3NldEFtb3VudCkKCWZyYW1lX2RpZyAtMyAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMTYwIDgKCWJ0b2kKCWZyYW1lX2RpZyAtMSAvLyBwdXJjaGFzZUFzc2V0RGVwb3NpdFR4OiBheGZlcgoJZ3R4bnMgQXNzZXRBbW91bnQKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE2NAoJLy8gdmVyaWZpZWRRdW90YXRpb24gPSB0cnVlCglpbnQgMQoJZnJhbWVfYnVyeSAtNSAvLyB2ZXJpZmllZFF1b3RhdGlvbjogYm9vbAoKaWY0X2VuZDoKCS8vIGlmNV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MTY2CgkvLyBvbGQuYXNzZXQ1ID09IHB1cmNoYXNlQXNzZXREZXBvc2l0VHgueGZlckFzc2V0ICYmIG9sZC5xdW90ZUFzc2V0NSA+IDAKCWZyYW1lX2RpZyAtMyAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMTg0IDgKCWJ0b2kKCWZyYW1lX2RpZyAtMSAvLyBwdXJjaGFzZUFzc2V0RGVwb3NpdFR4OiBheGZlcgoJZ3R4bnMgWGZlckFzc2V0Cgk9PQoJZHVwCglieiBza2lwX2FuZDQKCWZyYW1lX2RpZyAtMyAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMTc2IDgKCWJ0b2kKCWludCAwCgk+CgkmJgoKc2tpcF9hbmQ0OgoJYnogaWY1X2VuZAoKCS8vIGlmNV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE2NwoJLy8gYXNzZXJ0KG9sZC5xdW90ZUFzc2V0NSA9PSBwdXJjaGFzZUFzc2V0RGVwb3NpdFR4LmFzc2V0QW1vdW50KQoJZnJhbWVfZGlnIC0zIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAxNzYgOAoJYnRvaQoJZnJhbWVfZGlnIC0xIC8vIHB1cmNoYXNlQXNzZXREZXBvc2l0VHg6IGF4ZmVyCglndHhucyBBc3NldEFtb3VudAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MTY4CgkvLyB2ZXJpZmllZFF1b3RhdGlvbiA9IHRydWUKCWludCAxCglmcmFtZV9idXJ5IC01IC8vIHZlcmlmaWVkUXVvdGF0aW9uOiBib29sCgppZjVfZW5kOgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxNzAKCS8vIGFzc2VydCh2ZXJpZmllZFF1b3RhdGlvbikKCWZyYW1lX2RpZyAtNSAvLyB2ZXJpZmllZFF1b3RhdGlvbjogYm9vbAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxNzIKCS8vIGFzc2VydChvbGQuc3RhdGUgPT0gMSB8fCBvbGQuc3RhdGUgPT0gMykKCWZyYW1lX2RpZyAtMyAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMCA4CglidG9pCglpbnQgMQoJPT0KCWR1cAoJYm56IHNraXBfb3IwCglmcmFtZV9kaWcgLTMgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDAgOAoJYnRvaQoJaW50IDMKCT09Cgl8fAoKc2tpcF9vcjA6Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE3MwoJLy8gYXNzZXJ0KG5ld0l0ZW0uc3RhdGUgPT0gMikKCWZyYW1lX2RpZyAtNCAvLyBuZXdJdGVtOiBBc2FEYXRhCglleHRyYWN0IDAgOAoJYnRvaQoJaW50IDIKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE3NQoJLy8gYXNzZXJ0KHRoaXMuYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKG5mdEFzc2V0KSA9PSAxKQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBuZnRBc3NldDogYXNzZXQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJYXNzZXJ0CglpbnQgMQoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MTc3CgkvLyBmZWUgPSAocHVyY2hhc2VBc3NldERlcG9zaXRUeC5hc3NldEFtb3VudCAqIHRoaXMuZmVlLnZhbHVlKSAvIFNDQUxFCglmcmFtZV9kaWcgLTEgLy8gcHVyY2hhc2VBc3NldERlcG9zaXRUeDogYXhmZXIKCWd0eG5zIEFzc2V0QW1vdW50CglieXRlIDB4NjYgLy8gImYiCglhcHBfZ2xvYmFsX2dldAoJKgoJaW50IDEwXzAwMAoJLwoJZnJhbWVfYnVyeSAtNiAvLyBmZWU6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MTgwCgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICBhc3NldEFtb3VudDogZmVlLAoJLy8gICAgICAgeGZlckFzc2V0OiBwdXJjaGFzZUFzc2V0RGVwb3NpdFR4LnhmZXJBc3NldCwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuZ292ZXJub3IudmFsdWUsCgkvLyAgICAgICBmZWU6IDAKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxODEKCS8vIGFzc2V0QW1vdW50OiBmZWUKCWZyYW1lX2RpZyAtNiAvLyBmZWU6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MTgyCgkvLyB4ZmVyQXNzZXQ6IHB1cmNoYXNlQXNzZXREZXBvc2l0VHgueGZlckFzc2V0CglmcmFtZV9kaWcgLTEgLy8gcHVyY2hhc2VBc3NldERlcG9zaXRUeDogYXhmZXIKCWd0eG5zIFhmZXJBc3NldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE4MwoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5nb3Zlcm5vci52YWx1ZQoJYnl0ZSAweDY3IC8vICJnIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MTg0CgkvLyBmZWU6IDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE4OAoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgYXNzZXRBbW91bnQ6IHB1cmNoYXNlQXNzZXREZXBvc2l0VHguYXNzZXRBbW91bnQgLSBmZWUsCgkvLyAgICAgICB4ZmVyQXNzZXQ6IHB1cmNoYXNlQXNzZXREZXBvc2l0VHgueGZlckFzc2V0LAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogb2xkLnNlbGxlciwKCS8vICAgICAgIGZlZTogMAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE4OQoJLy8gYXNzZXRBbW91bnQ6IHB1cmNoYXNlQXNzZXREZXBvc2l0VHguYXNzZXRBbW91bnQgLSBmZWUKCWZyYW1lX2RpZyAtMSAvLyBwdXJjaGFzZUFzc2V0RGVwb3NpdFR4OiBheGZlcgoJZ3R4bnMgQXNzZXRBbW91bnQKCWZyYW1lX2RpZyAtNiAvLyBmZWU6IHVpbnQ2NAoJLQoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MTkwCgkvLyB4ZmVyQXNzZXQ6IHB1cmNoYXNlQXNzZXREZXBvc2l0VHgueGZlckFzc2V0CglmcmFtZV9kaWcgLTEgLy8gcHVyY2hhc2VBc3NldERlcG9zaXRUeDogYXhmZXIKCWd0eG5zIFhmZXJBc3NldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE5MQoJLy8gYXNzZXRSZWNlaXZlcjogb2xkLnNlbGxlcgoJZnJhbWVfZGlnIC0zIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCA4IDMyCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjE5MgoJLy8gZmVlOiAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxOTYKCS8vIHRoaXMuZGF0YShuZnRBc3NldCkudmFsdWUgPSBuZXdJdGVtCglieXRlIDB4NjQgLy8gImQiCglmcmFtZV9kaWcgLTIgLy8gbmZ0QXNzZXQ6IGFzc2V0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtNCAvLyBuZXdJdGVtOiBBc2FEYXRhCglib3hfcHV0CgoJLy8gaWY2X2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoxOTkKCS8vIG9sZC5zdGF0ZSA9PSAxCglmcmFtZV9kaWcgLTMgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDAgOAoJYnRvaQoJaW50IDEKCT09CglieiBpZjZfZW5kCgoJLy8gaWY2X2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MjAxCgkvLyB0aGlzLnJlc2VydmVzKG9sZC5hc3NldDEpLnZhbHVlID0gdGhpcy5yZXNlcnZlcyhvbGQuYXNzZXQxKS52YWx1ZSAtIG9sZC53ZWlnaHQKCWJ5dGUgMHg3MiAvLyAiciIKCWZyYW1lX2RpZyAtMyAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMTIwIDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJYnl0ZSAweDcyIC8vICJyIgoJZnJhbWVfZGlnIC0zIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAxMjAgOAoJYnRvaQoJaXRvYgoJY29uY2F0Cglib3hfZ2V0Cglhc3NlcnQKCWJ0b2kKCWZyYW1lX2RpZyAtMyAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMTA0IDgKCWJ0b2kKCS0KCWl0b2IKCWJveF9wdXQKCmlmNl9lbmQ6CglyZXRzdWIKCi8vIGNoYW5nZVF1b3RhdGlvbih1aW50NjRbXSxhc3NldCl2b2lkCi8vCi8vIENoYW5nZSBwcmljZSBxdW90ZXMgZm9yIE5GVCBvbiBzYWxlCi8vCi8vIEBwYXJhbSBuZnRBc3NldCBUaGUgZ29sZCBjb2luIE5GVCBhc3NldAovLyBAcGFyYW0gbnVtYmVycyBUaGUgYnl0ZXMgY29udGFpbmluZyBxdW90ZUFzc2V0MSwgYXNzZXQxLCBxdW90ZUFzc2V0MiAuLiBhc3NldDUKYWJpX3JvdXRlX2NoYW5nZVF1b3RhdGlvbjoKCWJ5dGUgMHg7IGR1cG4gMiAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyBudW1iZXJzOiB1aW50NjRbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBuZnRBc3NldDogYXNzZXQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFzc2V0cwoKCS8vIGV4ZWN1dGUgY2hhbmdlUXVvdGF0aW9uKHVpbnQ2NFtdLGFzc2V0KXZvaWQKCWNhbGxzdWIgY2hhbmdlUXVvdGF0aW9uCglpbnQgMQoJcmV0dXJuCgpjaGFuZ2VRdW90YXRpb246Cglwcm90byA1IDAKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjIxMgoJLy8gb2xkID0gdGhpcy5kYXRhKG5mdEFzc2V0KS52YWx1ZQoJYnl0ZSAweDY0IC8vICJkIgoJZnJhbWVfZGlnIC0xIC8vIG5mdEFzc2V0OiBhc3NldAoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IC0zIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjIxMwoJLy8gbmV3U3RhdGUgPSBvbGQuc3RhdGUKCWZyYW1lX2RpZyAtMyAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMCA4CglidG9pCglmcmFtZV9idXJ5IC00IC8vIG5ld1N0YXRlOiB1aW50NjQKCgkvLyBpZjdfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjIxNAoJLy8gbmV3U3RhdGUgPT0gMgoJZnJhbWVfZGlnIC00IC8vIG5ld1N0YXRlOiB1aW50NjQKCWludCAyCgk9PQoJYnogaWY3X2VuZAoKCS8vIGlmN19jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjIxNQoJLy8gbmV3U3RhdGUgPSAzCglpbnQgMwoJZnJhbWVfYnVyeSAtNCAvLyBuZXdTdGF0ZTogdWludDY0CgppZjdfZW5kOgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoyMTcKCS8vIG5ld0l0ZW06IEFzYURhdGEgPSB7CgkvLyAgICAgICBzdGF0ZTogbmV3U3RhdGUsCgkvLyAgICAgICBzZWxsZXI6IG9sZC5zZWxsZXIsCgkvLyAgICAgICBvd25lcjogb2xkLm93bmVyLAoJLy8gICAgICAgdmF1bHRPd25lckFkZHJlc3M6IG9sZC52YXVsdE93bmVyQWRkcmVzcywKCS8vICAgICAgIHdlaWdodDogb2xkLndlaWdodCwKCS8vICAgICAgIHF1b3RlQXNzZXQxOiBudW1iZXJzWzBdLAoJLy8gICAgICAgYXNzZXQxOiBBc3NldC5mcm9tSUQobnVtYmVyc1sxXSksCgkvLyAgICAgICBxdW90ZUFzc2V0MjogbnVtYmVyc1syXSwKCS8vICAgICAgIGFzc2V0MjogQXNzZXQuZnJvbUlEKG51bWJlcnNbM10pLAoJLy8gICAgICAgcXVvdGVBc3NldDM6IG51bWJlcnNbNF0sCgkvLyAgICAgICBhc3NldDM6IEFzc2V0LmZyb21JRChudW1iZXJzWzVdKSwKCS8vICAgICAgIHF1b3RlQXNzZXQ0OiBudW1iZXJzWzZdLAoJLy8gICAgICAgYXNzZXQ0OiBBc3NldC5mcm9tSUQobnVtYmVyc1s3XSksCgkvLyAgICAgICBxdW90ZUFzc2V0NTogbnVtYmVyc1s4XSwKCS8vICAgICAgIGFzc2V0NTogQXNzZXQuZnJvbUlEKG51bWJlcnNbOV0pCgkvLyAgICAgfQoJZnJhbWVfZGlnIC00IC8vIG5ld1N0YXRlOiB1aW50NjQKCWl0b2IKCWZyYW1lX2RpZyAtMyAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgOCAzMgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDQwIDMyCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgNzIgMzIKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAxMDQgOAoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gbnVtYmVyczogdWludDY0W10KCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMCA4CglidG9pCglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBudW1iZXJzOiB1aW50NjRbXQoJc3RvcmUgMCAvLyBmdWxsIGFycmF5Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCA4IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDE2IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDI0IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDMyIDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDQwIDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDQ4IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDU2IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDY0IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDcyIDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfYnVyeSAtNSAvLyBuZXdJdGVtOiBBc2FEYXRhCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoyMzUKCS8vIGFzc2VydCgKCS8vICAgICAgIChudW1iZXJzWzBdID4gMCAmJiBudW1iZXJzWzFdID4gMCkgfHwKCS8vICAgICAgICAgKG51bWJlcnNbMl0gPiAwICYmIG51bWJlcnNbM10gPiAwKSB8fAoJLy8gICAgICAgICAobnVtYmVyc1s0XSA+IDAgJiYgbnVtYmVyc1s1XSA+IDApIHx8CgkvLyAgICAgICAgIChudW1iZXJzWzZdID4gMCAmJiBudW1iZXJzWzddID4gMCkgfHwKCS8vICAgICAgICAgKG51bWJlcnNbOF0gPiAwICYmIG51bWJlcnNbOV0gPiAwKQoJLy8gICAgICkKCWZyYW1lX2RpZyAtMiAvLyBudW1iZXJzOiB1aW50NjRbXQoJc3RvcmUgMCAvLyBmdWxsIGFycmF5Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAwIDgKCWJ0b2kKCWludCAwCgk+CglkdXAKCWJ6IHNraXBfYW5kNQoJZnJhbWVfZGlnIC0yIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDggOAoJYnRvaQoJaW50IDAKCT4KCSYmCgpza2lwX2FuZDU6CglkdXAKCWJueiBza2lwX29yMQoJZnJhbWVfZGlnIC0yIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDE2IDgKCWJ0b2kKCWludCAwCgk+CglkdXAKCWJ6IHNraXBfYW5kNgoJZnJhbWVfZGlnIC0yIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDI0IDgKCWJ0b2kKCWludCAwCgk+CgkmJgoKc2tpcF9hbmQ2OgoJfHwKCnNraXBfb3IxOgoJZHVwCglibnogc2tpcF9vcjIKCWZyYW1lX2RpZyAtMiAvLyBudW1iZXJzOiB1aW50NjRbXQoJc3RvcmUgMCAvLyBmdWxsIGFycmF5Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAzMiA4CglidG9pCglpbnQgMAoJPgoJZHVwCglieiBza2lwX2FuZDcKCWZyYW1lX2RpZyAtMiAvLyBudW1iZXJzOiB1aW50NjRbXQoJc3RvcmUgMCAvLyBmdWxsIGFycmF5Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCA0MCA4CglidG9pCglpbnQgMAoJPgoJJiYKCnNraXBfYW5kNzoKCXx8Cgpza2lwX29yMjoKCWR1cAoJYm56IHNraXBfb3IzCglmcmFtZV9kaWcgLTIgLy8gbnVtYmVyczogdWludDY0W10KCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgNDggOAoJYnRvaQoJaW50IDAKCT4KCWR1cAoJYnogc2tpcF9hbmQ4CglmcmFtZV9kaWcgLTIgLy8gbnVtYmVyczogdWludDY0W10KCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgNTYgOAoJYnRvaQoJaW50IDAKCT4KCSYmCgpza2lwX2FuZDg6Cgl8fAoKc2tpcF9vcjM6CglkdXAKCWJueiBza2lwX29yNAoJZnJhbWVfZGlnIC0yIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDY0IDgKCWJ0b2kKCWludCAwCgk+CglkdXAKCWJ6IHNraXBfYW5kOQoJZnJhbWVfZGlnIC0yIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDcyIDgKCWJ0b2kKCWludCAwCgk+CgkmJgoKc2tpcF9hbmQ5OgoJfHwKCnNraXBfb3I0OgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoyNDIKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT0gb2xkLm93bmVyKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0zIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCA0MCAzMgoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MjQ0CgkvLyBhc3NlcnQodGhpcy5hcHAuYWRkcmVzcy5hc3NldEJhbGFuY2UobmZ0QXNzZXQpID09IDEpCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIG5mdEFzc2V0OiBhc3NldAoJYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCglhc3NlcnQKCWludCAxCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoyNDUKCS8vIGFzc2VydChuZXdJdGVtLnN0YXRlID09IDEgfHwgbmV3SXRlbS5zdGF0ZSA9PSAzKQoJZnJhbWVfZGlnIC01IC8vIG5ld0l0ZW06IEFzYURhdGEKCWV4dHJhY3QgMCA4CglidG9pCglpbnQgMQoJPT0KCWR1cAoJYm56IHNraXBfb3I1CglmcmFtZV9kaWcgLTUgLy8gbmV3SXRlbTogQXNhRGF0YQoJZXh0cmFjdCAwIDgKCWJ0b2kKCWludCAzCgk9PQoJfHwKCnNraXBfb3I1OgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoyNDcKCS8vIHRoaXMuZGF0YShuZnRBc3NldCkudmFsdWUgPSBuZXdJdGVtCglieXRlIDB4NjQgLy8gImQiCglmcmFtZV9kaWcgLTEgLy8gbmZ0QXNzZXQ6IGFzc2V0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtNSAvLyBuZXdJdGVtOiBBc2FEYXRhCglib3hfcHV0CglyZXRzdWIKCi8vIHJlcXVlc3RQYXJjZWxEZWxpdmVyeShhc3NldCl2b2lkCmFiaV9yb3V0ZV9yZXF1ZXN0UGFyY2VsRGVsaXZlcnk6CglieXRlIDB4OyBkdXAgLy8gcHVzaCBlbXB0eSBieXRlcyB0byBmaWxsIHRoZSBzdGFjayBmcmFtZSBmb3IgdGhpcyBzdWJyb3V0aW5lJ3MgbG9jYWwgdmFyaWFibGVzCgoJLy8gbmZ0QXNzZXQ6IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyBleGVjdXRlIHJlcXVlc3RQYXJjZWxEZWxpdmVyeShhc3NldCl2b2lkCgljYWxsc3ViIHJlcXVlc3RQYXJjZWxEZWxpdmVyeQoJaW50IDEKCXJldHVybgoKcmVxdWVzdFBhcmNlbERlbGl2ZXJ5OgoJcHJvdG8gMyAwCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoyNTEKCS8vIG9sZCA9IHRoaXMuZGF0YShuZnRBc3NldCkudmFsdWUKCWJ5dGUgMHg2NCAvLyAiZCIKCWZyYW1lX2RpZyAtMSAvLyBuZnRBc3NldDogYXNzZXQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMiAvLyBzdG9yYWdlIGtleS8vb2xkCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoyNTMKCS8vIG5ld0l0ZW06IEFzYURhdGEgPSB7CgkvLyAgICAgICBzdGF0ZTogNCwgLy8gMyAtIHJlcXVlc3QgcGFyY2VsIGRlbGl2ZXJ5IGJ5IG93bmVyCgkvLyAgICAgICBzZWxsZXI6IG9sZC5zZWxsZXIsCgkvLyAgICAgICBvd25lcjogb2xkLm93bmVyLAoJLy8gICAgICAgdmF1bHRPd25lckFkZHJlc3M6IG9sZC52YXVsdE93bmVyQWRkcmVzcywKCS8vICAgICAgIHdlaWdodDogb2xkLndlaWdodCwKCS8vICAgICAgIHF1b3RlQXNzZXQxOiAwLAoJLy8gICAgICAgYXNzZXQxOiBBc3NldC56ZXJvSW5kZXgsCgkvLyAgICAgICBxdW90ZUFzc2V0MjogMCwKCS8vICAgICAgIGFzc2V0MjogQXNzZXQuemVyb0luZGV4LAoJLy8gICAgICAgcXVvdGVBc3NldDM6IDAsCgkvLyAgICAgICBhc3NldDM6IEFzc2V0Lnplcm9JbmRleCwKCS8vICAgICAgIHF1b3RlQXNzZXQ0OiAwLAoJLy8gICAgICAgYXNzZXQ0OiBBc3NldC56ZXJvSW5kZXgsCgkvLyAgICAgICBxdW90ZUFzc2V0NTogMCwKCS8vICAgICAgIGFzc2V0NTogQXNzZXQuemVyb0luZGV4CgkvLyAgICAgfQoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDQKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgOCAzMgoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDQwIDMyCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgNzIgMzIKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAxMDQgOAoJYnRvaQoJaXRvYgoJY29uY2F0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJY29uY2F0CglmcmFtZV9idXJ5IC0zIC8vIG5ld0l0ZW06IEFzYURhdGEKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjI3MAoJLy8gYXNzZXJ0KG9sZC5zdGF0ZSA9PSAyIHx8IG9sZC5zdGF0ZSA9PSAzKQoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAwIDgKCWJ0b2kKCWludCAyCgk9PQoJZHVwCglibnogc2tpcF9vcjYKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMCA4CglidG9pCglpbnQgMwoJPT0KCXx8Cgpza2lwX29yNjoKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MjcxCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09IG9sZC5vd25lcikKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgNDAgMzIKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjI3MwoJLy8gdGhpcy5kYXRhKG5mdEFzc2V0KS52YWx1ZSA9IG5ld0l0ZW0KCWJ5dGUgMHg2NCAvLyAiZCIKCWZyYW1lX2RpZyAtMSAvLyBuZnRBc3NldDogYXNzZXQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG5ld0l0ZW06IEFzYURhdGEKCWJveF9wdXQKCXJldHN1YgoKLy8gc2V0UGFyY2VsRGVsaXZlcnkoYXNzZXQpdm9pZAphYmlfcm91dGVfc2V0UGFyY2VsRGVsaXZlcnk6CglieXRlIDB4OyBkdXAgLy8gcHVzaCBlbXB0eSBieXRlcyB0byBmaWxsIHRoZSBzdGFjayBmcmFtZSBmb3IgdGhpcyBzdWJyb3V0aW5lJ3MgbG9jYWwgdmFyaWFibGVzCgoJLy8gbmZ0QXNzZXQ6IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyBleGVjdXRlIHNldFBhcmNlbERlbGl2ZXJ5KGFzc2V0KXZvaWQKCWNhbGxzdWIgc2V0UGFyY2VsRGVsaXZlcnkKCWludCAxCglyZXR1cm4KCnNldFBhcmNlbERlbGl2ZXJ5OgoJcHJvdG8gMyAwCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoyNzYKCS8vIG9sZCA9IHRoaXMuZGF0YShuZnRBc3NldCkudmFsdWUKCWJ5dGUgMHg2NCAvLyAiZCIKCWZyYW1lX2RpZyAtMSAvLyBuZnRBc3NldDogYXNzZXQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMiAvLyBzdG9yYWdlIGtleS8vb2xkCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoyNzgKCS8vIG5ld0l0ZW06IEFzYURhdGEgPSB7CgkvLyAgICAgICBzdGF0ZTogNSwgLy8gNSAtIHBhcmNlbCBjb25maXJtZWQgYnkgdmF1bHQgb3duZXIKCS8vICAgICAgIHNlbGxlcjogb2xkLnNlbGxlciwKCS8vICAgICAgIG93bmVyOiBvbGQub3duZXIsCgkvLyAgICAgICB2YXVsdE93bmVyQWRkcmVzczogb2xkLnZhdWx0T3duZXJBZGRyZXNzLAoJLy8gICAgICAgd2VpZ2h0OiBvbGQud2VpZ2h0LAoJLy8gICAgICAgcXVvdGVBc3NldDE6IDAsCgkvLyAgICAgICBhc3NldDE6IEFzc2V0Lnplcm9JbmRleCwKCS8vICAgICAgIHF1b3RlQXNzZXQyOiAwLAoJLy8gICAgICAgYXNzZXQyOiBBc3NldC56ZXJvSW5kZXgsCgkvLyAgICAgICBxdW90ZUFzc2V0MzogMCwKCS8vICAgICAgIGFzc2V0MzogQXNzZXQuemVyb0luZGV4LAoJLy8gICAgICAgcXVvdGVBc3NldDQ6IDAsCgkvLyAgICAgICBhc3NldDQ6IEFzc2V0Lnplcm9JbmRleCwKCS8vICAgICAgIHF1b3RlQXNzZXQ1OiAwLAoJLy8gICAgICAgYXNzZXQ1OiBBc3NldC56ZXJvSW5kZXgKCS8vICAgICB9CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwNQoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCA4IDMyCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgNDAgMzIKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCA3MiAzMgoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDEwNCA4CglidG9pCglpdG9iCgljb25jYXQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgljb25jYXQKCWZyYW1lX2J1cnkgLTMgLy8gbmV3SXRlbTogQXNhRGF0YQoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6Mjk1CgkvLyBhc3NlcnQob2xkLnN0YXRlID09IDQpCglmcmFtZV9kaWcgLTIgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDAgOAoJYnRvaQoJaW50IDQKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjI5NgoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PSBvbGQudmF1bHRPd25lckFkZHJlc3MpCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTIgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDcyIDMyCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czoyOTgKCS8vIHRoaXMuZGF0YShuZnRBc3NldCkudmFsdWUgPSBuZXdJdGVtCglieXRlIDB4NjQgLy8gImQiCglmcmFtZV9kaWcgLTEgLy8gbmZ0QXNzZXQ6IGFzc2V0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBuZXdJdGVtOiBBc2FEYXRhCglib3hfcHV0CglyZXRzdWIKCi8vIHNldE5vdEZvclNhbGUoYXNzZXQpdm9pZAphYmlfcm91dGVfc2V0Tm90Rm9yU2FsZToKCWJ5dGUgMHg7IGR1cCAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyBuZnRBc3NldDogYXNzZXQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFzc2V0cwoKCS8vIGV4ZWN1dGUgc2V0Tm90Rm9yU2FsZShhc3NldCl2b2lkCgljYWxsc3ViIHNldE5vdEZvclNhbGUKCWludCAxCglyZXR1cm4KCnNldE5vdEZvclNhbGU6Cglwcm90byAzIDAKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjMwMQoJLy8gb2xkID0gdGhpcy5kYXRhKG5mdEFzc2V0KS52YWx1ZQoJYnl0ZSAweDY0IC8vICJkIgoJZnJhbWVfZGlnIC0xIC8vIG5mdEFzc2V0OiBhc3NldAoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IC0yIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjMwMgoJLy8gbmV3SXRlbTogQXNhRGF0YSA9IHsKCS8vICAgICAgIHN0YXRlOiAyLCAvLyAyIC0gbm90IGZvciBzYWxlCgkvLyAgICAgICBzZWxsZXI6IG9sZC5zZWxsZXIsCgkvLyAgICAgICBvd25lcjogb2xkLm93bmVyLAoJLy8gICAgICAgdmF1bHRPd25lckFkZHJlc3M6IG9sZC52YXVsdE93bmVyQWRkcmVzcywKCS8vICAgICAgIHdlaWdodDogb2xkLndlaWdodCwKCS8vICAgICAgIHF1b3RlQXNzZXQxOiAwLAoJLy8gICAgICAgYXNzZXQxOiBBc3NldC56ZXJvSW5kZXgsCgkvLyAgICAgICBxdW90ZUFzc2V0MjogMCwKCS8vICAgICAgIGFzc2V0MjogQXNzZXQuemVyb0luZGV4LAoJLy8gICAgICAgcXVvdGVBc3NldDM6IDAsCgkvLyAgICAgICBhc3NldDM6IEFzc2V0Lnplcm9JbmRleCwKCS8vICAgICAgIHF1b3RlQXNzZXQ0OiAwLAoJLy8gICAgICAgYXNzZXQ0OiBBc3NldC56ZXJvSW5kZXgsCgkvLyAgICAgICBxdW90ZUFzc2V0NTogMCwKCS8vICAgICAgIGFzc2V0NTogQXNzZXQuemVyb0luZGV4CgkvLyAgICAgfQoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDIKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgOCAzMgoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDQwIDMyCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgNzIgMzIKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAxMDQgOAoJYnRvaQoJaXRvYgoJY29uY2F0CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJY29uY2F0CglmcmFtZV9idXJ5IC0zIC8vIG5ld0l0ZW06IEFzYURhdGEKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjMxOQoJLy8gYXNzZXJ0KG9sZC5zdGF0ZSA9PSAzKQoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAwIDgKCWJ0b2kKCWludCAzCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czozMjAKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT0gb2xkLm93bmVyKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCA0MCAzMgoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MzIyCgkvLyB0aGlzLmRhdGEobmZ0QXNzZXQpLnZhbHVlID0gbmV3SXRlbQoJYnl0ZSAweDY0IC8vICJkIgoJZnJhbWVfZGlnIC0xIC8vIG5mdEFzc2V0OiBhc3NldAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gbmV3SXRlbTogQXNhRGF0YQoJYm94X3B1dAoJcmV0c3ViCgovLyB3aXRoZHJhd05GVChhc3NldCl2b2lkCmFiaV9yb3V0ZV93aXRoZHJhd05GVDoKCWJ5dGUgMHggLy8gcHVzaCBlbXB0eSBieXRlcyB0byBmaWxsIHRoZSBzdGFjayBmcmFtZSBmb3IgdGhpcyBzdWJyb3V0aW5lJ3MgbG9jYWwgdmFyaWFibGVzCgoJLy8gbmZ0QXNzZXQ6IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyBleGVjdXRlIHdpdGhkcmF3TkZUKGFzc2V0KXZvaWQKCWNhbGxzdWIgd2l0aGRyYXdORlQKCWludCAxCglyZXR1cm4KCndpdGhkcmF3TkZUOgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czozMjUKCS8vIG9sZCA9IHRoaXMuZGF0YShuZnRBc3NldCkudmFsdWUKCWJ5dGUgMHg2NCAvLyAiZCIKCWZyYW1lX2RpZyAtMSAvLyBuZnRBc3NldDogYXNzZXQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMiAvLyBzdG9yYWdlIGtleS8vb2xkCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czozMjcKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT0gb2xkLm93bmVyKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCA0MCAzMgoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MzI4CgkvLyBhc3NlcnQob2xkLnN0YXRlID09IDIgfHwgb2xkLnN0YXRlID09IDQgfHwgb2xkLnN0YXRlID09IDUpCglmcmFtZV9kaWcgLTIgLy8gc3RvcmFnZSBrZXkvL29sZAoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDAgOAoJYnRvaQoJaW50IDIKCT09CglkdXAKCWJueiBza2lwX29yNwoJZnJhbWVfZGlnIC0yIC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAwIDgKCWJ0b2kKCWludCA0Cgk9PQoJfHwKCnNraXBfb3I3OgoJZHVwCglibnogc2tpcF9vcjgKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMCA4CglidG9pCglpbnQgNQoJPT0KCXx8Cgpza2lwX29yODoKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MzMxCgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICBhc3NldEFtb3VudDogMSwKCS8vICAgICAgIHhmZXJBc3NldDogbmZ0QXNzZXQsCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiBvbGQub3duZXIsCgkvLyAgICAgICBmZWU6IDAKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czozMzIKCS8vIGFzc2V0QW1vdW50OiAxCglpbnQgMQoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MzMzCgkvLyB4ZmVyQXNzZXQ6IG5mdEFzc2V0CglmcmFtZV9kaWcgLTEgLy8gbmZ0QXNzZXQ6IGFzc2V0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MzM0CgkvLyBhc3NldFJlY2VpdmVyOiBvbGQub3duZXIKCWZyYW1lX2RpZyAtMiAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgNDAgMzIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MzM1CgkvLyBmZWU6IDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gb3B0aW5Bc3NldChhc3NldCl2b2lkCmFiaV9yb3V0ZV9vcHRpbkFzc2V0OgoJLy8gbmZ0QXNzZXQ6IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyBleGVjdXRlIG9wdGluQXNzZXQoYXNzZXQpdm9pZAoJY2FsbHN1YiBvcHRpbkFzc2V0CglpbnQgMQoJcmV0dXJuCgpvcHRpbkFzc2V0OgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czozNDAKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgICAgeGZlckFzc2V0OiBuZnRBc3NldCwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICBmZWU6IDAKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czozNDEKCS8vIGFzc2V0QW1vdW50OiAwCglpbnQgMAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MzQyCgkvLyB4ZmVyQXNzZXQ6IG5mdEFzc2V0CglmcmFtZV9kaWcgLTEgLy8gbmZ0QXNzZXQ6IGFzc2V0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MzQzCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czozNDQKCS8vIGZlZTogMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBkZXBvc2l0TkZUKHVpbnQ2NFtdLGFkZHJlc3MsYXhmZXIpdm9pZAphYmlfcm91dGVfZGVwb3NpdE5GVDoKCWJ5dGUgMHg7IGR1cG4gMiAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyBudW1iZXJzOiB1aW50NjRbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBzZWxsZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBuZnREZXBvc2l0VHg6IGF4ZmVyCgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBheGZlcgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgZGVwb3NpdE5GVCh1aW50NjRbXSxhZGRyZXNzLGF4ZmVyKXZvaWQKCWNhbGxzdWIgZGVwb3NpdE5GVAoJaW50IDEKCXJldHVybgoKZGVwb3NpdE5GVDoKCXByb3RvIDYgMAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MzQ4CgkvLyBhc3NlcnQodGhpcy5kYXRhKG5mdERlcG9zaXRUeC54ZmVyQXNzZXQpLmV4aXN0cykKCWJ5dGUgMHg2NCAvLyAiZCIKCWZyYW1lX2RpZyAtMSAvLyBuZnREZXBvc2l0VHg6IGF4ZmVyCglndHhucyBYZmVyQXNzZXQKCWl0b2IKCWNvbmNhdAoJYm94X2xlbgoJc3dhcAoJcG9wCglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjM0OQoJLy8gb2xkID0gdGhpcy5kYXRhKG5mdERlcG9zaXRUeC54ZmVyQXNzZXQpLnZhbHVlCglieXRlIDB4NjQgLy8gImQiCglmcmFtZV9kaWcgLTEgLy8gbmZ0RGVwb3NpdFR4OiBheGZlcgoJZ3R4bnMgWGZlckFzc2V0CglpdG9iCgljb25jYXQKCWZyYW1lX2J1cnkgLTQgLy8gc3RvcmFnZSBrZXkvL29sZAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MzUwCgkvLyBuZXdTdGF0ZSA9IDMKCWludCAzCglmcmFtZV9idXJ5IC01IC8vIG5ld1N0YXRlOiB1aW50NjQKCgkvLyBpZjhfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjM1MgoJLy8gbnVtYmVyc1swXSA9PSAwICYmCgkvLyAgICAgICBudW1iZXJzWzJdID09IDAgJiYKCS8vICAgICAgIG51bWJlcnNbNF0gPT0gMCAmJgoJLy8gICAgICAgbnVtYmVyc1s2XSA9PSAwICYmCgkvLyAgICAgICBudW1iZXJzWzhdID09IDAKCWZyYW1lX2RpZyAtMyAvLyBudW1iZXJzOiB1aW50NjRbXQoJc3RvcmUgMCAvLyBmdWxsIGFycmF5Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAwIDgKCWJ0b2kKCWludCAwCgk9PQoJZHVwCglieiBza2lwX2FuZDEwCglmcmFtZV9kaWcgLTMgLy8gbnVtYmVyczogdWludDY0W10KCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMTYgOAoJYnRvaQoJaW50IDAKCT09CgkmJgoKc2tpcF9hbmQxMDoKCWR1cAoJYnogc2tpcF9hbmQxMQoJZnJhbWVfZGlnIC0zIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDMyIDgKCWJ0b2kKCWludCAwCgk9PQoJJiYKCnNraXBfYW5kMTE6CglkdXAKCWJ6IHNraXBfYW5kMTIKCWZyYW1lX2RpZyAtMyAvLyBudW1iZXJzOiB1aW50NjRbXQoJc3RvcmUgMCAvLyBmdWxsIGFycmF5Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCA0OCA4CglidG9pCglpbnQgMAoJPT0KCSYmCgpza2lwX2FuZDEyOgoJZHVwCglieiBza2lwX2FuZDEzCglmcmFtZV9kaWcgLTMgLy8gbnVtYmVyczogdWludDY0W10KCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgNjQgOAoJYnRvaQoJaW50IDAKCT09CgkmJgoKc2tpcF9hbmQxMzoKCWJ6IGlmOF9lbmQKCgkvLyBpZjhfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czozNTgKCS8vIG5ld1N0YXRlID0gMgoJaW50IDIKCWZyYW1lX2J1cnkgLTUgLy8gbmV3U3RhdGU6IHVpbnQ2NAoKaWY4X2VuZDoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6MzYwCgkvLyBuZXdJdGVtOiBBc2FEYXRhID0gewoJLy8gICAgICAgc3RhdGU6IDMsCgkvLyAgICAgICBzZWxsZXI6IHNlbGxlciwKCS8vICAgICAgIG93bmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICB2YXVsdE93bmVyQWRkcmVzczogb2xkLnZhdWx0T3duZXJBZGRyZXNzLAoJLy8gICAgICAgd2VpZ2h0OiBvbGQud2VpZ2h0LAoJLy8gICAgICAgcXVvdGVBc3NldDE6IG51bWJlcnNbMF0sCgkvLyAgICAgICBhc3NldDE6IEFzc2V0LmZyb21JRChudW1iZXJzWzFdKSwKCS8vICAgICAgIHF1b3RlQXNzZXQyOiBudW1iZXJzWzJdLAoJLy8gICAgICAgYXNzZXQyOiBBc3NldC5mcm9tSUQobnVtYmVyc1szXSksCgkvLyAgICAgICBxdW90ZUFzc2V0MzogbnVtYmVyc1s0XSwKCS8vICAgICAgIGFzc2V0MzogQXNzZXQuZnJvbUlEKG51bWJlcnNbNV0pLAoJLy8gICAgICAgcXVvdGVBc3NldDQ6IG51bWJlcnNbNl0sCgkvLyAgICAgICBhc3NldDQ6IEFzc2V0LmZyb21JRChudW1iZXJzWzddKSwKCS8vICAgICAgIHF1b3RlQXNzZXQ1OiBudW1iZXJzWzhdLAoJLy8gICAgICAgYXNzZXQ1OiBBc3NldC5mcm9tSUQobnVtYmVyc1s5XSkKCS8vICAgICB9CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMwoJZnJhbWVfZGlnIC0yIC8vIHNlbGxlcjogYWRkcmVzcwoJY29uY2F0Cgl0eG4gU2VuZGVyCgljb25jYXQKCWZyYW1lX2RpZyAtNCAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgNzIgMzIKCWNvbmNhdAoJZnJhbWVfZGlnIC00IC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAxMDQgOAoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gbnVtYmVyczogdWludDY0W10KCXN0b3JlIDAgLy8gZnVsbCBhcnJheQoJbG9hZCAwIC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMCA4CglidG9pCglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBudW1iZXJzOiB1aW50NjRbXQoJc3RvcmUgMCAvLyBmdWxsIGFycmF5Cglsb2FkIDAgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCA4IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDE2IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDI0IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDMyIDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDQwIDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDQ4IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDU2IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDY0IDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG51bWJlcnM6IHVpbnQ2NFtdCglzdG9yZSAwIC8vIGZ1bGwgYXJyYXkKCWxvYWQgMCAvLyBmdWxsIGFycmF5CglleHRyYWN0IDcyIDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfYnVyeSAtNiAvLyBuZXdJdGVtOiBBc2FEYXRhCgoJLy8gY29udHJhY3RzL2FzYS1nb2xkLXNtYXJ0Y29udHJhY3QuYWxnby50czozNzgKCS8vIHZlcmlmeVR4bihuZnREZXBvc2l0VHgsIHsKCS8vICAgICAgIGFzc2V0QW1vdW50OiB7IGdyZWF0ZXJUaGFuOiAwIH0sCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIKCS8vICAgICB9KQoJLy8gdmVyaWZ5IGFzc2V0QW1vdW50CglmcmFtZV9kaWcgLTEgLy8gbmZ0RGVwb3NpdFR4OiBheGZlcgoJZ3R4bnMgQXNzZXRBbW91bnQKCWludCAwCgk+Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG5mdERlcG9zaXRUeDogYXhmZXIKCWd0eG5zIEFzc2V0UmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIG5mdERlcG9zaXRUeDogYXhmZXIKCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6Mzg1CgkvLyBhc3NlcnQodGhpcy5hcHAuYWRkcmVzcy5hc3NldEJhbGFuY2UobmZ0RGVwb3NpdFR4LnhmZXJBc3NldCkgPT0gMSkKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gbmZ0RGVwb3NpdFR4OiBheGZlcgoJZ3R4bnMgWGZlckFzc2V0Cglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCWFzc2VydAoJaW50IDEKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYXNhLWdvbGQtc21hcnRjb250cmFjdC5hbGdvLnRzOjM4NgoJLy8gYXNzZXJ0KG9sZC5zdGF0ZSA9PSAyIHx8IG9sZC5zdGF0ZSA9PSAzKQoJZnJhbWVfZGlnIC00IC8vIHN0b3JhZ2Uga2V5Ly9vbGQKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAwIDgKCWJ0b2kKCWludCAyCgk9PQoJZHVwCglibnogc2tpcF9vcjkKCWZyYW1lX2RpZyAtNCAvLyBzdG9yYWdlIGtleS8vb2xkCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgMCA4CglidG9pCglpbnQgMwoJPT0KCXx8Cgpza2lwX29yOToKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hc2EtZ29sZC1zbWFydGNvbnRyYWN0LmFsZ28udHM6Mzg5CgkvLyB0aGlzLmRhdGEobmZ0RGVwb3NpdFR4LnhmZXJBc3NldCkudmFsdWUgPSBuZXdJdGVtCglieXRlIDB4NjQgLy8gImQiCglmcmFtZV9kaWcgLTEgLy8gbmZ0RGVwb3NpdFR4OiBheGZlcgoJZ3R4bnMgWGZlckFzc2V0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtNiAvLyBuZXdJdGVtOiBBc2FEYXRhCglib3hfcHV0CglyZXRzdWIKCmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsYWRkcmVzcyl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgllcnIKCmNhbGxfTm9PcDoKCW1ldGhvZCAic2VsbEFzc2V0V2l0aERlcG9zaXQoYXhmZXIsYWRkcmVzcyxhc3NldCxhc3NldCx1aW50NjQsdWludDY0KXZvaWQiCgltZXRob2QgImJ1eU5GVChheGZlcixhc3NldCl2b2lkIgoJbWV0aG9kICJjaGFuZ2VRdW90YXRpb24oYXNzZXQsdWludDY0W10pdm9pZCIKCW1ldGhvZCAicmVxdWVzdFBhcmNlbERlbGl2ZXJ5KGFzc2V0KXZvaWQiCgltZXRob2QgInNldFBhcmNlbERlbGl2ZXJ5KGFzc2V0KXZvaWQiCgltZXRob2QgInNldE5vdEZvclNhbGUoYXNzZXQpdm9pZCIKCW1ldGhvZCAid2l0aGRyYXdORlQoYXNzZXQpdm9pZCIKCW1ldGhvZCAib3B0aW5Bc3NldChhc3NldCl2b2lkIgoJbWV0aG9kICJkZXBvc2l0TkZUKGF4ZmVyLGFkZHJlc3MsdWludDY0W10pdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9zZWxsQXNzZXRXaXRoRGVwb3NpdCBhYmlfcm91dGVfYnV5TkZUIGFiaV9yb3V0ZV9jaGFuZ2VRdW90YXRpb24gYWJpX3JvdXRlX3JlcXVlc3RQYXJjZWxEZWxpdmVyeSBhYmlfcm91dGVfc2V0UGFyY2VsRGVsaXZlcnkgYWJpX3JvdXRlX3NldE5vdEZvclNhbGUgYWJpX3JvdXRlX3dpdGhkcmF3TkZUIGFiaV9yb3V0ZV9vcHRpbkFzc2V0IGFiaV9yb3V0ZV9kZXBvc2l0TkZUCgllcnIKCmNhbGxfVXBkYXRlQXBwbGljYXRpb246CgltZXRob2QgInVwZGF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX3VwZGF0ZUFwcGxpY2F0aW9uCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "AsaGoldSmartcontract",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "fee",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "governor",
            "type": "address",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "updateApplication",
        "args": [],
        "desc": "Creator is allowed to update application",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "sellAssetWithDeposit",
        "args": [
          {
            "name": "nftDepositTx",
            "type": "axfer",
            "desc": "NFT deposit tx"
          },
          {
            "name": "vaultOwnerAddress",
            "type": "address",
            "desc": "Address of the account which can set state Shipped to customer"
          },
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "tokenAsset",
            "type": "asset",
            "desc": ""
          },
          {
            "name": "weight",
            "type": "uint64",
            "desc": "The weight of the gold contained in the gold coin"
          },
          {
            "name": "price",
            "type": "uint64",
            "desc": "The price in gold token for which the asset can be sold to clients"
          }
        ],
        "desc": "Deposit Gold coin NFT, set seller owner and price for sale",
        "returns": {
          "type": "void",
          "desc": "The sum of a and b"
        }
      },
      {
        "name": "buyNFT",
        "args": [
          {
            "name": "purchaseAssetDepositTx",
            "type": "axfer",
            "desc": "Transfer to the smart contract with the purchase price"
          },
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": "Identifies NFT which client wants to buy"
          }
        ],
        "desc": "Client can buy NFT which is for sale on the reserve sale or secondary sale",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "changeQuotation",
        "args": [
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": "The gold coin NFT asset"
          },
          {
            "name": "numbers",
            "type": "uint64[]",
            "desc": "The bytes containing quoteAsset1, asset1, quoteAsset2 .. asset5"
          }
        ],
        "desc": "Change price quotes for NFT on sale",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "requestParcelDelivery",
        "args": [
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setParcelDelivery",
        "args": [
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setNotForSale",
        "args": [
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "withdrawNFT",
        "args": [
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "optinAsset",
        "args": [
          {
            "name": "nftAsset",
            "type": "asset",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "depositNFT",
        "args": [
          {
            "name": "nftDepositTx",
            "type": "axfer",
            "desc": ""
          },
          {
            "name": "seller",
            "type": "address",
            "desc": ""
          },
          {
            "name": "numbers",
            "type": "uint64[]",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}